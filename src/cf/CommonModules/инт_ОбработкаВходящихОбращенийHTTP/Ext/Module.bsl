////////////////////////////////////////////////////////////////////////////////
// инт_ОбработкаВходящихОбращенийHTTP
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция - Обработка входящего потока POST
// Функция обрабатывает данные поступившие на вход, валидирует их и записывает в очередь входящих(или отправляет на обработку мимо очереди, если такая возможность будет)
// Возможные варианты ответов:
//  20х - Если запрос обработан успешо 
//  40х - Если запрос не соответствует требованиям(не прошел валидацию, например)
//  50х - Если ошибка на стороне сервера(Ошибка при обработке или при помещении в очередь, или же при обработке, если асинхронная обработка в потоке отключена.)
// Параметры:
//  Запрос     -   HTTPСервисЗапрос   - Запрос поступивший в сервис.
// 
// Возвращаемое значение:
// HTTPСервисОтвет  -  Результат обработки. HTTPОтвет
//
Функция ОбработкаВходящегоПотокаPOST(Запрос) Экспорт
    
    ИдентификаторПотока = Запрос.ПараметрыURL.Получить("flow_id");
    ИдентификаторСообщенияСтрокой = Запрос.ПараметрыURL.Получить("message_id"); 
    
    Если Не ЗначениеЗаполнено(ИдентификаторПотока) Тогда
        Возврат ПодготовитьОтвет(400, "flow_id is missing");
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ИдентификаторСообщенияСтрокой) Тогда
        Возврат ПодготовитьОтвет(400, "message_id is missing");
    КонецЕсли;
    
    Попытка
    	ИдентификаторСообщения = новый УникальныйИдентификатор(ИдентификаторСообщенияСтрокой);
    Исключение
        Возврат ПодготовитьОтвет(400, "message_id must be uuid");
    КонецПопытки;
    
    ПотокДанных = Справочники.инт_ПотокиДанных.ПолучитьПотокПоИдентификатору(ИдентификаторПотока, Перечисления.инт_НаправлениеПотокаДанных.Входящий);
    
    Если Не ЗначениеЗаполнено(ПотокДанных) Тогда
    	Возврат ПодготовитьОтвет(405, "unknown flow_id");
    КонецЕсли;
    
    ТелоСообщения = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
    
    Если не ЗначениеЗаполнено(ТелоСообщения) Тогда
        Возврат ПодготовитьОтвет(400, "body is empty");	
    КонецЕсли;
    
    Попытка
        ТелоОбъектом = инт_КоннекторHTTP.JsonВОбъект(ТелоСообщения);	
    Исключение
        ОписаниеОшибки = СтрШаблон("payload deserialization failed. Extended info: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат ПодготовитьОтвет(400, ОписаниеОшибки);
    КонецПопытки;
    
    Если ПотокДанных.Валидация Тогда
    	Попытка
            Валидация = Справочники.инт_ПотокиДанных.ВалидироватьСообщениеПоПотоку(ТелоОбъектом, ПотокДанных); 
            Если не Валидация.ВалидацияУспешна Тогда
            	ВызватьИсключение Валидация.СтрокаОшибки; 
            КонецЕсли;
        Исключение
            ОписаниеОшибки = СтрШаблон("body validation failed.
                |
                |Extended info:%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            Возврат ПодготовитьОтвет(400, ОписаниеОшибки);
        КонецПопытки;
    КонецЕсли;
    
    // Сообщение прошло все необходимые проверки и дальше будет возвращать ошибки >500.
    
    Попытка
        инт_ОбработкаВходящихПотоков.ОбработкаВходящегоСообщенияПоПотоку(ТелоОбъектом, ПотокДанных, ИдентификаторСообщения);	
    Исключение
        ОписаниеОшибки = СтрШаблон("Unexpected server error.
                |
                |Extended info:%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        Возврат ПодготовитьОтвет(500, ОписаниеОшибки);    
    КонецПопытки;
    
    
    
    Возврат ПодготовитьОтвет(200, "SUCCESS");
    
КонецФункции

#КонецОбласти



#Область СлужебныеПроцедурыИФункции
Функция ПодготовитьОтвет(КодСостояния, Знач Тело)
    Ответ = Новый HTTPСервисОтвет(КодСостояния);
    Если Не ТипЗнч(Тело) = Тип("Строка") Тогда
    	Тело = инт_КоннекторHTTP.ОбъектВJson(Тело);
    КонецЕсли;
    Ответ.УстановитьТелоИзСтроки(Тело);
    Возврат  Ответ;		
КонецФункции
  

#КонецОбласти