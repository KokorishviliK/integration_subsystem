#Область ПрограммныйИнтерфейс

// Возвращает текст ошибки когда запрос пустой
// Возвращаемое значение:
//   Строка	- текст ошибки когда запрос пустой
Функция ТекстОшибкиПустойЗапрос() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Ожидается ВЫБРАТЬ'; en = 'Expected to SELECT'");
	Возврат СтрШаблон("{(1, 1)}: %1", ТекстОшибки);
	
КонецФункции

// Возвращает информацию о ошибке в тексте запрос
//
// Параметры:
//   ТекстОшибки - Строка - Текст ошибки вида //{(1, 1)}: Ожидается ВЫБРАТЬ
//   АнализируетсяПланЗапроса - Булево - Анализируется план запроса (присутствуют маркировочные запросы)
//
// Возвращаемое значение:
//   Структура - Информация о ошибке
//   	*Текст - Строка - Текст ошибки
//   	*НомерСтроки - Число - Номер строки
//   	*НомерСтолбца - Число - Номер столбцы
Функция ИнформацияООшибке(ТекстОшибки, АнализируетсяПланЗапроса = Ложь) Экспорт
	
	// Разбирает строку ошибки запроса
	// Например: {(19, 2)}: Синтаксическая ошибка "Справочник.Товары"
	// c 18 платформы {<Неизвестный модуль>(19, 2)}: ...
	// <<?>>Справочник.Товары КАК Товары	
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 1;
	Если ИТК_Строки.РазборПрочитатьСимвол(ТекстОшибки, Индекс) = "{" Тогда
		
		// Учтем что с 18 платформы текст {<Неизвестный модуль>(19, 2)}: ...
		ИТК_Строки.РазборПрочитатьДоСимвола(ТекстОшибки, "(", Индекс);
		
		// Разбираем позицию ошибки
		ИТК_Строки.РазборПропуститьНаборСимволов(ТекстОшибки, "(", Индекс);
		НомерСтроки = ИТК_Строки.РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		ИТК_Строки.РазборПропуститьНаборСимволов(ТекстОшибки, ", ", Индекс);
		НомерСтолбца = ИТК_Строки.РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		ИТК_Строки.РазборПропуститьНаборСимволов(ТекстОшибки, ")}: ", Индекс);
		Текст = ИТК_Строки.РазборПрочитатьДоСимвола(ТекстОшибки, "", Индекс);
		
		Если АнализируетсяПланЗапроса Тогда
			НомерСтроки = НомерСтроки - 1;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Текст", Текст);
		Результат.Вставить("НомерСтроки", НомерСтроки);
		Результат.Вставить("НомерСтолбца", НомерСтолбца);
		
	Иначе
		
		Результат = ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Новое значение сложного параметра
//
// Параметры:
//   Вид - Перечисление.ИТК_СложныйПараметрЗапроса - Вид
//   Значение - Произвольный - Значение
//   Представление - Строка - Представление
//
// Возвращаемое значение:
//   Структура - Данные сложного параметра
//
Функция ЗначениеСложногоПараметра(Вид, Значение, Представление = "") Экспорт
	
	Если Вид = ИТК_Перечисления.СложныйПараметрЗапросаВыражение() Тогда
		
		Представление = ИТК_Строки.Сокращенно(Значение, 70);
		
	ИначеЕсли Вид = ИТК_Перечисления.СложныйПараметрЗапросаТаблицаЗначений() Тогда
		
		Представление = НСтр("ru = '<Таблица значений>'; en = '<Table of values>'");
		
	ИначеЕсли Вид = ИТК_Перечисления.СложныйПараметрЗапросаГраница() Тогда
		
		Если Значение.Вид = ИТК_Перечисления.ВидГраницыВключая() Тогда
			ВидПредставление = НСтр("ru = 'Включая'; en = 'Including'");
		ИначеЕсли Значение.Вид = ИТК_Перечисления.ВидГраницыИсключая() Тогда
			ВидПредставление = НСтр("ru = 'Исключая'; en = 'Excluding'");
		КонецЕсли;
		
		Представление = СтрШаблон("%1; %2", ВидПредставление, Значение.Значение);
		
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение, Представление", Вид, Значение, Представление);
	
КонецФункции

// Возвращает описание границы
//
// Параметры:
//   Значение - Граница, Дата, МоментВремени - Значение
//   Вид - Перечисление.ИТК_ВидГраницы - Вид границы (по умолчанию: Включая)
//
// Возвращаемое значение:
//   Структура	- Описание границы
//
Функция ОписаниеГраницы(Значение, Вид = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если Вид = Неопределено Тогда
		Вид = ИТК_Перечисления.ВидГраницыВключая();
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение", Вид, Значение);
	
КонецФункции

// Корректирует табуляцию вставляемого текста
// Параметры:
//   ВставляемыйТекст - Строка - Вставляемый текст
//   ИсходныйТекст - Строка - Исходный текст
// Возвращаемое значение:
//   Строка - Скорректированный текст
Функция СкорректироватьТабуляциюВставляемогоТекста(ВставляемыйТекст, ИсходныйТекст) Экспорт
	
	// Определим уровень табуляции исходного текста
	ИсходныйТекстСтроки = СтрРазделить(ИсходныйТекст, Символы.ПС);
	КоличествоТабуляций = 0;
	
	Если ИсходныйТекстСтроки.Количество() >= 2 Тогда
		
		АнализируемаяСтрока = ИсходныйТекстСтроки[1];
		Для НомерСимвола = 1 По СтрДлина(АнализируемаяСтрока) Цикл
			
			Если Сред(АнализируемаяСтрока, НомерСимвола, 1) <> Символы.Таб Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоТабуляций = КоличествоТабуляций + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИТК_Строки.ДобавитьТабВМногострочныйТекст(ВставляемыйТекст, Ложь, КоличествоТабуляций - 1);
	
КонецФункции

Функция ЗаменитьПараметрВТексте(Текст, Имя, Замена, ГраницыВыделения = Неопределено) Экспорт
	
	Результат = Текст;
	
	СтрокаПоиска = "&" + Имя;
	Индекс = СтрНайти(Текст, СтрокаПоиска);
	Если ЗначениеЗаполнено(Индекс) Тогда
		
		ИндексСледующегоСимвола = Индекс + СтрДлина(СтрокаПоиска);
		СледующийСимвол = Сред(Текст, ИндексСледующегоСимвола, 1);
		
		НаборСимволовКонецПараметра = " )," + Символы.Таб + Символы.ПС + Символы.ВК;
		СледующийСимволКонецПараметра = СтрНайти(НаборСимволовКонецПараметра, СледующийСимвол) ИЛИ СледующийСимвол = "";
		
		Если СледующийСимволКонецПараметра Тогда
			
			// Вставляем замену
			БлокПараметр = Лев(Текст, Индекс - 1) + Замена;
			Если ГраницыВыделения = Неопределено Тогда
				
				НачалоГраницы = ИТК_РедакторКодаКлиентСервер.КурсорПоНомеруСимвола(БлокПараметр, Индекс);
				КонецГраницы = ИТК_РедакторКодаКлиентСервер.КурсорПоНомеруСимвола(БлокПараметр, Индекс + СтрДлина(Замена));
				
				ГраницыВыделения = Новый Структура;
				ГраницыВыделения.Вставить("НачалоСтроки", НачалоГраницы.НомерСтроки);
				ГраницыВыделения.Вставить("НачалоКолонки", НачалоГраницы.НомерКолонки);
				ГраницыВыделения.Вставить("КонецСтроки", КонецГраницы.НомерСтроки);
				ГраницыВыделения.Вставить("КонецКолонки", КонецГраницы.НомерКолонки);
				
			КонецЕсли;
			
		Иначе
			
			БлокПараметр = Лев(Текст, ИндексСледующегоСимвола - 1);
			
		КонецЕсли;
		
		Результат = БлокПараметр + ЗаменитьПараметрВТексте(Сред(Текст, ИндексСледующегоСимвола), Имя, Замена, ГраницыВыделения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

