#Область ПрограммныйИнтерфейс

Функция ЗапрешенныеКРедактированиюРеквизитыОбъекта(ИмяОбъекта) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Поддерживается("3.1") Тогда
		
		ПараметрыФункции = Новый Массив;
		ПараметрыФункции.Добавить(ИмяОбъекта);
		
		Результат = ИТКВ_БСПКлиентСервер.ВыполнитьФункцию("ЗапретРедактированияРеквизитовОбъектов.БлокируемыеРеквизитыОбъекта", ПараметрыФункции);
		
	Иначе
		
		Модуль = ИТКВ_БСПКлиентСерверПовтИсп.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовСлужебный");
		Если Модуль.ЗапретРедактированияПредусмотрен(ИмяОбъекта) Тогда
			
			МенеджерОбъекта = ИТКВ_Метаданные.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
			Результат = МенеджерОбъекта.ПолучитьБлокируемыеРеквизитыОбъекта();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуютсяДополнительныеРеквизиты(Ссылка) Экспорт
	
	Если НЕ ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.Свойства") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Ссылка);
	
	Возврат ИТКВ_БСПКлиентСервер.ВыполнитьФункцию("УправлениеСвойствами.ИспользоватьДопРеквизиты", ПараметрыФункции);
	
КонецФункции

Функция ИспользуютсяДополнительныеСведения(Ссылка) Экспорт
	
	Если Не ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.Свойства") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Ссылка);
	
	Возврат ИТКВ_БСПКлиентСервер.ВыполнитьФункцию("УправлениеСвойствами.ИспользоватьДопСведения", ПараметрыФункции);
	
КонецФункции

Функция СтруктураЗначенияСвойства() Экспорт
	
	Если АнглийскаяБСП() Тогда
		
		ПолеЗаголовок = "Title";
		ПолеТипЗначения = "ValueType";
		ПолеЭтоДополнительноеСведение = "IsAdditionalInfo";
		
		ПолеСвойство = "Property";
		ПолеЗначение = "Value";
		
	Иначе
		
		ПолеЗаголовок = "Заголовок";
		ПолеТипЗначения = "ТипЗначения";
		ПолеЭтоДополнительноеСведение = "ЭтоДополнительноеСведение";
		
		ПолеСвойство = "Свойство";
		ПолеЗначение = "Значение";
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПолеСвойство", ПолеСвойство);
	Результат.Вставить("ПолеЗначение", ПолеЗначение);
	
	Результат.Вставить("ПолеЗаголовок", ПолеЗаголовок);
	Результат.Вставить("ПолеТипЗначения", ПолеТипЗначения);
	Результат.Вставить("ПолеЭтоДополнительноеСведение", ПолеЭтоДополнительноеСведение);
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить(ПолеЗаголовок);
	СписокСвойств.Добавить(ПолеТипЗначения);
	СписокСвойств.Добавить(ПолеЭтоДополнительноеСведение);
	Результат.Вставить("Список", СтрСоединить(СписокСвойств, ","));
	
	Возврат Результат;
	
КонецФункции

Функция РаботаСВнешнимиРесурсамиЗаблокирована() Экспорт
	
	Если НЕ ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Поддерживается("3.0") Тогда
		ИмяМодуля = "РегламентныеЗаданияСервер";
	Иначе
		ИмяМодуля = "РегламентныеЗаданияСлужебный";
	КонецЕсли;
	
	Возврат ИТКВ_БСПКлиентСервер.ВыполнитьФункцию(ИмяМодуля + ".РаботаСВнешнимиРесурсамиЗаблокирована");
	
КонецФункции

Процедура РазблокироватьРаботуСВнешнимиРесурсами() Экспорт
	
	Если НЕ ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		Возврат;
	КонецЕсли;
	
	Если Поддерживается("3.0") Тогда
		ИмяМодуля = "РегламентныеЗаданияСервер";
	Иначе
		ИмяМодуля = "РегламентныеЗаданияСлужебный";
	КонецЕсли;
	
	ИТКВ_БСПКлиентСервер.ВыполнитьПроцедуру(ИмяМодуля + ".РазрешитьРаботуСВнешнимиРесурсами");
	
КонецПроцедуры

Функция РегламентноеЗаданиеДоступноПоФункциональнымОпциям(Задание, ЗависимостиЗаданий = Неопределено) Экспорт
	
	Если НЕ ИТКВ_БСППовтИсп.СуществуетПодсистема("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Задание);
	ПараметрыФункции.Добавить(ЗависимостиЗаданий);
	
	Возврат ИТКВ_БСПКлиентСервер.ВыполнитьФункцию("РегламентныеЗаданияСлужебный.РегламентноеЗаданиеДоступноПоФункциональнымОпциям", ПараметрыФункции);
	
КонецФункции

Функция ДополнительнаяИнформацияПоРегламентномуЗаданию(ОбъектМетаданных) Экспорт
	
	ЗависимыеРегламентныеЗадания = ИТКВ_БСППовтИсп.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	РаботаетСВнешнимиРесурсами = Ложь;
	ФункциональнаяОпция = "";
	ДоступноПоФункциональнымОпциям = Истина;
	ЗаданиеВМоделиСервиса = Ложь;
	
	ОписаниеРегламентногоЗадания = Неопределено;
	Если ЗависимыеРегламентныеЗадания <> Неопределено Тогда
		ОписаниеРегламентногоЗадания = ЗависимыеРегламентныеЗадания.Найти(ОбъектМетаданных, "РегламентноеЗадание");
	КонецЕсли;
	
	Если ОписаниеРегламентногоЗадания <> Неопределено Тогда
		
		ФункциональнаяОпция = ОписаниеРегламентногоЗадания.ФункциональнаяОпция;
		Если ТипЗнч(ФункциональнаяОпция) = Тип("ОбъектМетаданных") Тогда
			ФункциональнаяОпция = ФункциональнаяОпция.Имя;
		КонецЕсли;
		РаботаетСВнешнимиРесурсами = ОписаниеРегламентногоЗадания.РаботаетСВнешнимиРесурсами;
		
		ДоступноПоФункциональнымОпциям = РегламентноеЗаданиеДоступноПоФункциональнымОпциям(ОбъектМетаданных, ЗависимыеРегламентныеЗадания);
		
		РегламентныеЗаданияВМоделиСервиса = ИТКВ_БСППовтИсп.РегламентныеЗаданияВМоделиСервиса();
		ЗаданиеВМоделиСервиса = (РегламентныеЗаданияВМоделиСервиса.Получить(ОбъектМетаданных) <> Неопределено);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РаботаетСВнешнимиРесурсами", РаботаетСВнешнимиРесурсами);
	Результат.Вставить("ФункциональнаяОпция", ФункциональнаяОпция);
	Результат.Вставить("ДоступноПоФункциональнымОпциям", ДоступноПоФункциональнымОпциям);
	Результат.Вставить("ЗаданиеВМоделиСервиса", ЗаданиеВМоделиСервиса);
	
	Возврат Результат;
	
КонецФункции

Функция Поддерживается(Версия = Неопределено) Экспорт
	
	ВерсияБСП = ИТКВ_БСПВызовСервера.Версия();
	Если ВерсияБСП = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Версия = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат (ИТКВ_ОбщийКлиентСервер.СравнитьВерсии(ВерсияБСП, Версия) >= 0);
	
КонецФункции

Функция АнглийскаяБСП() Экспорт
	
	Возврат НЕ ИТКВ_Общий.ВариантВстроенногоЯзыкаРусский();
	
КонецФункции

#Область БезопасноеХранилище

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с хранилищем паролей.

// Записывает конфиденциальные данные в безопасное хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец - ПланОбменаСсылка
//           - СправочникСсылка
//           - Строка - ссылка на объект информационной базы,
//             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//             Для объектов других типов в качестве владельца рекомендуется использовать ссылку на
//             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
//             или ключ в виде строки с учетом имен подсистем.
//             Например, для БСП:
//               Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.АдресныеОбъекты");
//             если нужно 1 хранилище на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом";
//             если нужно более 1 хранилища на подсистему БСП:
//               Владелец = "СтандартныеПодсистемы.УправлениеДоступом.<Уточнение>";
//  Данные  - Произвольный - данные помещаемые в безопасное хранилище. Неопределенно - удаляет все данные.
//            Для удаления данных по ключу следует использовать процедуру УдалитьДанныеИзБезопасногоХранилища.
//          - Структура - если параметр Ключ содержит Неопределено. Подробнее см. описание параметра Ключ
//  Ключ    - Строка       - ключ сохраняемых настроек, по умолчанию "Пароль".
//                           Ключ должен соответствовать правилам имен идентификаторов:
//                           1. Первым символом ключа должна быть буква или символ подчеркивания (_).
//                           2. Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_). 
//            Неопределено - для добавления набора данных структурой, где ключ структуры - это имя ключа данных,
//            а значение - сохраняемые данные. Пример использования см. ниже.
//
// Пример:
//
//  Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//      Если ТекущийПользовательМожетИзменятьПароль Тогда
//          УстановитьПривилегированныйРежим(Истина);
//          ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Логин, "Логин");
//          ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
//          УстановитьПривилегированныйРежим(Ложь);
//      КонецЕсли;
//  КонецПроцедуры
// 
//  Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//      Если ТекущийПользовательМожетИзменятьПароль Тогда
//          ЛогинИПароль = Новый Структура;
//          ЛогинИПароль.Вставить("Логин", Логин);
//          ЛогинИПароль.Вставить("Пароль", Пароль);
//          УстановитьПривилегированныйРежим(Истина);
//          ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ЛогинИПароль, Неопределено);
//          УстановитьПривилегированныйРежим(Ложь);
//      КонецЕсли;
//  КонецПроцедуры
//
Процедура ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	
	ИТКВ_БСПКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			           |параметр должен содержать ссылку; передано значение: %3 (тип %4).'"),
			"Владелец", "ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));
			
	Если ЗначениеЗаполнено(Ключ) Тогда
		
		ИТКВ_БСПКлиентСервер.Проверить(ТипЗнч(Ключ) = Тип("Строка"),
			СтрШаблон(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			|параметр должен содержать строку; передано значение: %3 (тип %4).'"),
			"Ключ", "ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище", Ключ, ТипЗнч(Ключ)));
			
	Иначе
		
		ИТКВ_БСПКлиентСервер.Проверить(ТипЗнч(Данные) = Тип("Структура"),
			СтрШаблон(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			|Если Ключ = Неопределено, то параметр должен содержать структуру; передано значение: %3 (тип %4).'"),
			"Данные", "ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище", Данные, ТипЗнч(Данные)));
		
	КонецЕсли;
	
		БезопасноеХранилищеДанных = РегистрыСведений.ИТКВ_БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	БезопасноеХранилищеДанных.Владелец = Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	
	Если Данные <> Неопределено Тогда
		
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ключ) Тогда
				ДанныеДляСохранения.Вставить(Ключ, Данные);
			Иначе
				ИТКВ_БСПКлиентСервер.ДополнитьСтруктуру(ДанныеДляСохранения, Данные, Истина);
			КонецЕсли;
			
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
			
		Иначе
			
			ДанныеДляСохранения = ?(ЗначениеЗаполнено(Ключ), Новый Структура(Ключ, Данные), Данные);
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			
			БезопасноеХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец = Владелец;
			БезопасноеХранилищеДанных.Записать();
			
		КонецЕсли;
	Иначе
		
		БезопасноеХранилищеДанных.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владельцы   - Массив из ПланОбменаСсылка
//              - Массив из СправочникСсылка
//              - Массив из Строка - ссылки на объекты информационной базы,
//                  представляющих объекты-владельцы или уникальные строки(до 128 символов) владельцев данных.
//  Ключи       - Строка - содержит имя ключа данных или список имен ключей, указанных через запятую.
//              - Неопределено - будут возвращены все сохраненные данные переданных владельцев. 
//  ОбщиеДанные - Булево - Истина, если требуется в модели сервиса получить данные из общих данных в разделенном режиме.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - ПланОбменаСсылка
//           - СправочникСсылка
//           - Строка - ссылка на объект информационной базы 
//                      или строка до 128 символов идентифицирующая владельца данных.
//    * Значение - Произвольный - если в параметре Ключи указан один ключ, 
//                                то возвращается его значение произвольного типа.
//               - Структура    - если в параметре Ключи указано несколько ключей или Неопределено, 
//                                где ключ структуры - это имя ключа сохраненных данных, 
//                                а значение - данные произвольного типа. Когда для ключа отсутствуют данные, 
//                                то значение содержит Неопределено.
//               - Неопределено - если данные по ключу отсутствуют.
//
// Пример:
//	Процедура РассылкаПриглашений(Пользователи)
//		
//			УстановитьПривилегированныйРежим(Истина);
//			ДанныеАвторизации  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователи, "Логин, Пароль");
//			УстановитьПривилегированныйРежим(Ложь);
//			
//			Для каждого Пользователь Из Пользователи Цикл
//				ОтправитьПриглашение(Пользователь, ДанныеАвторизации[Пользователь]);
//			КонецЦикла;
//		
//	КонецПроцедуры
//
Функция ПрочитатьДанныеВладельцевИзБезопасногоХранилища(Владельцы, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	
	ИТКВ_БСПКлиентСервер.Проверить(ТипЗнч(Владельцы) = Тип("Массив"),
		СтрШаблон(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			           |параметр должен содержать массив; передано значение: %3 (тип %4).'"),
			"Владельцы", "ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища", Владельцы, ТипЗнч(Владельцы)));
	
	Результат = ДанныеИзБезопасногоХранилища(Владельцы, Ключи, ОбщиеДанные);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка
//              - СправочникСсылка
//              - Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или уникальная строка(до 128 символов).
//  Ключи       - Строка - содержит список имен сохраненных данных, указанных через запятую.
//              - Неопределено - будут возвращены все сохраненные данные владельца.
//  ОбщиеДанные - Булево - Истина, если требуется в модели сервиса получить данные из общих данных в разделенном режиме.
// 
// Возвращаемое значение:
//  Произвольный, Структура, Неопределено - данные из безопасного хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределенно.
//
// Пример:
//	Если ТекущийПользовательМожетИзменятьПароль Тогда
//		УстановитьПривилегированныйРежим(Истина);
//		Логин  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка, "Логин");
//		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка);
//		УстановитьПривилегированныйРежим(Ложь);
//	Иначе
//		Элементы.ГруппаЛогинИПароль.Видимость = Ложь;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ЛогинИПароль  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка, Неопределено);
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	
	Владельцы = ИТКВ_БСПКлиентСервер.ЗначениеВМассиве(Владелец);
	ДанныеВладельца = ПрочитатьДанныеВладельцевИзБезопасногоХранилища(Владельцы, Ключи, ОбщиеДанные);
	
	Результат = ДанныеВладельца[Владелец];
	
	Возврат Результат;
	
КонецФункции

// Удаляет конфиденциальные данные в безопасное хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец - ПланОбменаСсылка
//           - СправочникСсылка
//           - Строка - ссылка на объект информационной базы,
//               представляющий объект-владелец сохраняемого пароля или уникальная строка(до 128 символов).
//           - Массив - ссылки на объекты информационной базы для удаления данным по нескольким владельцам.
//  Ключи    - Строка - содержит список имен удаляемых данных, указанных через запятую. 
//               Неопределено - удаляет все данные.
//
// Пример:
//	Процедура ПередУдалением(Отказ)
//		
//		// Проверка значения свойства ОбменДанными.Загрузка отсутствует, так как удалять данные
//		// из безопасного хранилища нужно даже при удалении объекта при обмене данными.
//		
//		УстановитьПривилегированныйРежим(Истина);
//		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Ссылка);
//		УстановитьПривилегированныйРежим(Ложь);
//		
//	КонецПроцедуры
//
Процедура УдалитьДанныеИзБезопасногоХранилища(Владелец, Ключи = Неопределено) Экспорт
	
	ИТКВ_БСПКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			           |параметр должен содержать ссылку; передано значение: %3 (тип %4).'"),
			"Владелец", "ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));
	
		БезопасноеХранилищеДанных = РегистрыСведений.ИТКВ_БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	Владельцы = ?(ТипЗнч(Владелец) = Тип("Массив"), Владелец, ИТКВ_БСПКлиентСервер.ЗначениеВМассиве(Владелец));
	
	Для Каждого ВладелецДанных Из Владельцы Цикл
		
		БезопасноеХранилищеДанных.Владелец = ВладелецДанных;
		БезопасноеХранилищеДанных.Прочитать();
		Если ТипЗнч(БезопасноеХранилищеДанных.Данные) = Тип("ХранилищеЗначения") Тогда
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			Если Ключи <> Неопределено И ТипЗнч(ДанныеДляСохранения) = Тип("Структура") Тогда
				СписокКлючей = СтрРазделить(Ключи, ",", Ложь);
				Если БезопасноеХранилищеДанных.Выбран() И СписокКлючей.Количество() > 0 Тогда
					Для Каждого КлючДляУдаления Из СписокКлючей Цикл
						Если ДанныеДляСохранения.Свойство(КлючДляУдаления) Тогда
							ДанныеДляСохранения.Удалить(КлючДляУдаления);
						КонецЕсли;
					КонецЦикла;
					ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
					БезопасноеХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
					БезопасноеХранилищеДанных.Записать();
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		БезопасноеХранилищеДанных.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ДанныеИзБезопасногоХранилища(Владельцы, Ключи, ОбщиеДанные)
	
	ИмяБезопасногоХранилищаДанных = "РегистрСведений.ИТКВ_БезопасноеХранилищеДанных";

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Владелец КАК ВладелецДанных,
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	#ИмяБезопасногоХранилищаДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец В (&Владельцы)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяБезопасногоХранилищаДанных", ИмяБезопасногоХранилищаДанных);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владельцы", Владельцы);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие();
	
	НаборДанныхКлюча = ?(ЗначениеЗаполнено(Ключи) И СтрНайти(Ключи, ","), Новый Структура(Ключи), Неопределено);
	Для Каждого ВладелецДанных Из Владельцы Цикл
		Результат.Вставить(ВладелецДанных, НаборДанныхКлюча);
	КонецЦикла;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ДанныеВладельца = Новый Структура(Ключи);
		
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				
				Если ЗначениеЗаполнено(Ключи) Тогда
					ВладелецДанных = Результат[РезультатЗапроса.ВладелецДанных];
					ЗаполнитьЗначенияСвойств(ДанныеВладельца, СохраненныеДанные);
				Иначе
					ДанныеВладельца = СохраненныеДанные;
				КонецЕсли;
				
				Если Ключи <> Неопределено
					И ДанныеВладельца <> Неопределено
					И ДанныеВладельца.Количество() = 1 Тогда
						ЗначениеПоКлючу = ?(ДанныеВладельца.Свойство(Ключи), ДанныеВладельца[Ключи], Неопределено);
						Результат.Вставить(РезультатЗапроса.ВладелецДанных, ЗначениеПоКлючу);
				Иначе
					Результат.Вставить(РезультатЗапроса.ВладелецДанных, ДанныеВладельца);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
#КонецОбласти
