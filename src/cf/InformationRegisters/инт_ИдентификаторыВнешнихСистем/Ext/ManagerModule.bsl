////////////////////////////////////////////////////////////////////////////////
// инт_ИдентификаторыВнешнихСистем
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Функция - Выполняет поиск ссылки на объект текущей бд.
// Алгоритм поиска:
// 1. Если идентификатор задан, будет выполнена попытка преобразования его к УникальныйИдентификатор и поиск "прямой ссылки" на объект заданого типа.
// 2. Если по какой-то причине объект не найден, будет выполнена попытка поиска идентификатора в регистре инт_ИдентификаторыВнешнихСистем. Если идентификатор не задан, в качестве идентификатора будет использован sha1 хеш структуры полей поиска.
// 3. Если идентификатор до сих пор не найден, то мы осуществим поиск по переданной структуре полей поиска.
// 4. Если ссылка на объект найдена, мы запишем ее в регистр инт_ИдентификаторыВнешнихСистем. в качестве идентификатора будет испльзовано значение поиска из пункта 2.
// Если ссылка не была найдена, то будет выброшено исключчение
//	
// Параметры:
//  Идентификатор		 - Строка	 - Идентификатор объекта во внешней системе
//  ПолноеИмяМетаданных	 - Строка	 - Полное имя метаданных для которого будет осуществлен поиск
//  СтруктураПолейПоиска - Структура	 - Ключи - имена реквизитов по которым будет осуществлен поиск. Значения - значения отборов.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Ссылка на объект БД.
//
Функция ПолучитьСсылку(Знач Идентификатор = "", ПолноеИмяМетаданных, СтруктураПолейПоиска=Неопределено) Экспорт
   	СсылкаНаОбъект = Неопределено;
	
	Если Идентификатор = "" И (СтруктураПолейПоиска = Неопределено ИЛИ  СтруктураПолейПоиска.Количество() = 0) Тогда
		ВызватьИсключение "Для поиска ссылки должен быть заполнен хотя бы один параметр!"
	КонецЕсли;
	СсылкаНаОбъект = ОсуществитьПоискПоПрямомуИдентификатору(Идентификатор, ПолноеИмяМетаданных);
	
	Если Не СсылкаНаОбъект = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	Если Идентификатор = "" Тогда
		Идентификатор = ПолучитьИдентификаторПоСтруктуреПолейПоиска(СтруктураПолейПоиска);
	КонецЕсли;
	
	СсылкаНаОбъект = ОсуществитьПоискПоРегистру(Идентификатор, ПолноеИмяМетаданных);
	Если Не СсылкаНаОбъект = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	СсылкаНаОбъект = ОсуществитьПоискПоПолямПоиска(СтруктураПолейПоиска, ПолноеИмяМетаданных);
	Если Не СсылкаНаОбъект = Неопределено Тогда
		ЗаписатьСоответствиеИдентификатораИСсылки(Идентификатор, СсылкаНаОбъект);
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон("По переданным данным не найдено ссылки в БД!
	|
	|Идентификатор: %1
	|ПолноеИмяМетаданных: %2
	|Данные по полям поиска: %3", Идентификатор, ПолноеИмяМетаданных, ПолучитьПредставлениеПолейПоиска(СтруктураПолейПоиска));
КонецФункции

// Процедура - Записать соответствие идентификатора и ссылки
//
// Параметры:
//  Идентификатор	 - 	Строка - Идентификатор внешней системы. 
//  СсылкаНаОбъект	 - ЛюбаяСсылка	 - Ссылка на объект нашей ИС
//
Процедура ЗаписатьСоответствиеИдентификатораИСсылки(Идентификатор, СсылкаНаОбъект) Экспорт
	Если Не ЗначениеЗаполнено(Идентификатор) ИЛИ Не ТипЗнч(Идентификатор) = тип("Строка") Тогда
		ВызватьИсключение "При записи соответствия идентификатора и ссылки в БД произошла ошибка!
		|Недопустимое значение идентификатора!";
	КонецЕсли;
	
	Если СсылкаНаОбъект.Пустая() Тогда
		ВызватьИсключение "При записи соответствия идентификатора и ссылки в БД произошла ошибка!
		|Нельзя записать соответствие с пустой ссылкой!";
	КонецЕсли;
	Запись = РегистрыСведений.инт_ИдентификаторыВнешнихСистем.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = Идентификатор;
	Запись.СсылкаНаОбъект = СсылкаНаОбъект;
	Запись.Записать(Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ОсуществитьПоискПоПрямомуИдентификатору(Идентификатор, ПолноеИмяМетаданных)
	Попытка
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Исключение
		// Если это не уид, то сразу дальше;
	    Возврат Неопределено;
	КонецПопытки;
	
	Менеджер = Новый (СтрЗаменить(ПолноеИмяМетаданных, ".", НСтр("English = 'Manager.'; Русский = 'Менеджер.'", Метаданные.ВариантВстроенногоЯзыка)));
	
	СсылкаНаОбъект = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
	
	Если СсылкаСуществует(СсылкаНаОбъект, ПолноеИмяМетаданных)  Тогда
		Возврат СсылкаНаОбъект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
 		
КонецФункции

Функция ОсуществитьПоискПоРегистру(Идентификатор, ПолноеИмяМетаданных)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	инт_ИдентификаторыВнешнихСистем.СсылкаНаОбъект КАК СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.инт_ИдентификаторыВнешнихСистем КАК инт_ИдентификаторыВнешнихСистем
	               |ГДЕ
	               |	инт_ИдентификаторыВнешнихСистем.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И СсылкаСуществует(Выборка.СсылкаНаОбъект, ПолноеИмяМетаданных) Тогда
		Возврат Выборка.СсылкаНаОбъект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОсуществитьПоискПоПолямПоиска(СтруктураПолейПоиска, ПолноеИмяМетаданных)
	ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    %1
        |ГДЕ
		|	1=1
        |    %2
        |";
	
	Запрос = Новый Запрос;
	
	ПоляПоиска = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПолейПоиска Цикл
		ПоляПоиска = ПоляПоиска + СтрШаблон(" И %1 = &%1", ЭлементСтруктуры.Ключ);
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяМетаданных, ПоляПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		СообщениеОбОшибке = "При поиске ссылки по полям поиска произошла ошибка. Количество результатов поиска > 1!
		|
		|Полное имя метаданных поиска: %1
		|Данные по полям поиска: %2";

		ВызватьИсключение СтрШаблон(СообщениеОбОшибке, ПолноеИмяМетаданных, ПолучитьПредставлениеПолейПоиска(СтруктураПолейПоиска));
	ИначеЕсли Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СсылкаСуществует(ЛюбаяСсылка, ПолноеИмяМетаданных)
    
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    [ИмяТаблицы]
        |ГДЕ
        |    Ссылка = &Ссылка
        |";
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ПолноеИмяМетаданных);
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
    
    УстановитьПривилегированныйРежим(Истина);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции

Функция ПолучитьИдентификаторПоСтруктуреПолейПоиска(СтруктураПолейПоиска)

	ДанныеСтрока=ПолучитьДвоичныеДанныеИзСтроки(ЗначениеВСтрокуВнутр(СтруктураПолейПоиска));
	
	Хеш=Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеш.Добавить(ДанныеСтрока);
	// сознательно не делаем получение строки из ДД потому что при попытках передать такие идентификаторы на клиент - могут возникнуть проблемы.	
	Возврат Строка(Хеш.ХешСумма);
КонецФункции

Функция ПолучитьПредставлениеПолейПоиска(СтруктураПолейПоиска)
	ПредставлениеПолейПоиска = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПолейПоиска Цикл
		ПредставлениеПолейПоиска = Символы.ПС + СтрШаблон("Поле: <%1>; Значение: <%2>", ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Возврат ПредставлениеПолейПоиска;
КонецФункции

#КонецОбласти

#КонецЕсли
