////////////////////////////////////////////////////////////////////////////////
// инт_ОчередьВходящихСообщений
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - арегистрировать сообщение
// Фиксирует сообщение в очереди входящих сообщений
// Параметры:
//  ВходящееСообщение           - Соответствие/Структура/строка/число/булево - Десериализованное сообщение
//  ПотокДанных                 - СправочникСсылка.инт_ПотокиДанных   - Ссылка на поток данных
//  ИдентификаторСообщения      - УникальныйИдентфикатор, Неопределено - Уникальный идентификатор сообщения если он есть. Если не заполнен - будет сгенерирован новый.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Уникальный идентификатор зарегистрированного входящего сообщения. 
//
Функция ЗарегистрироватьСообщение(ВходящееСообщение, ПотокДанных, ИдентификаторСообщения = Неопределено) Экспорт
    
    Если НЕ ПотокДанных.Активен Тогда
        // Поток не активен. тут нам не жалко, дропаем исключение.
        СообщениеОбОшибке = СтрШаблон("При регистрации сообщения по потоку <%1> произошла ошибка!
        |
        | Информация об ошибке: %2",ПотокДанных.Код, "Поток помечен как не активный!");
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.ОчередьИсходящихСообщений",УровеньЖурналаРегистрации.Ошибка,,ВходящееСообщение,СообщениеОбОшибке);
        ВызватьИсключение СообщениеОбОшибке;
    КонецЕсли;
    Если Не ПотокДанных.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Входящий Тогда
        СообщениеОбОшибке = СтрШаблон("При регистрации сообщения по потоку <%1> произошла ошибка!
        |
        | Информация об ошибке: %2",ПотокДанных.Код, "Нельзя регистрировать в очереди входящих сообщений исходящие потоки!");
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.ОчередьИсходящихСообщений",УровеньЖурналаРегистрации.Ошибка,,ВходящееСообщение,СообщениеОбОшибке);
        ВызватьИсключение СообщениеОбОшибке;
    КонецЕсли;
    
    Если ИдентификаторСообщения = Неопределено Тогда
    	 ИдентификаторСообщения = Новый УникальныйИдентификатор;
    КонецЕсли;
     
    НачатьТранзакцию();
    Попытка
        
        Запись = РегистрыСведений.инт_ОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
        Запись.ИдентификаторСообщения = ИдентификаторСообщения;
        Запись.ПотокДанных = ПотокДанных;
        Запись.ВходящееСообщение = Новый ХранилищеЗначения(ВходящееСообщение, Новый СжатиеДанных(9));
        Запись.Записать();
        
        РегистрыСведений.инт_ТекущийСтатусВходящихСообщений.ЗаписатьСтатусСообщения(Запись.ИдентификаторСообщения, Перечисления.инт_СтатусыВходящихСообщений.Новый);
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        СообщениеОбОшибке = СтрШаблон("При регистрации входящего сообщения по потоку <%1> произошла ошибка!
        |
        | Информация об ошибке: %2",ПотокДанных.ИдентификаторПотока, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.ОчередьИсходящихСообщений",УровеньЖурналаРегистрации.Ошибка,,ВходящееСообщение,СообщениеОбОшибке);
        ВызватьИсключение СообщениеОбОшибке;
    КонецПопытки;
    
    Возврат ИдентификаторСообщения;
КонецФункции

// Процедура - Удалить сообщение из очереди
// Удаляет сообщение из очереди. Удаляет все записи в связанных регистрах(Статус, историяСтатусов)
// Параметры:
//  ИдентификаторСообщения     -  УникальныйИдентификатор    - УникальныйИдентификатор сообщения удаляемого из очереди
//
Процедура УдалитьСообщениеИзОчереди(ИдентификаторСообщения) Экспорт
		
КонецПроцедуры

// Процедура - Обработать сообщение по идентификатору
// Обрабатывает сообщение по идентификатору.
//
// Параметры:
//  ИдентификаторСообщения     -   УникальныйИдентификатор   - Идентификатор сообщения которое требуется сформировать.
//
Процедура ОбработатьСообщениеПоИдентификатору(ИдентификаторСообщения) Экспорт
    СообщениеВОчереди = ПолучитьДанныеОчередиПоИдентификатору(ИдентификаторСообщения, "ВходящееСообщение,ПотокДанных");
    
    НачатьТранзакцию();
    Попытка
        Справочники.инт_ПотокиДанных.ОбработатьВходящееСообщениеПоПотоку(СообщениеВОчереди.ВходящееСообщение, СообщениеВОчереди.ПотокДанных);
        РегистрыСведений.инт_ТекущийСтатусВходящихСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Перечисления.инт_СтатусыВходящихСообщений.Обработан);
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        РегистрыСведений.инт_ТекущийСтатусВходящихСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Перечисления.инт_СтатусыВходящихСообщений.ОшибкаОбработки, ПодробноеПредставлениеОшибки);
        СообщениеОбОшибке = СтрШаблон("При попытке обработать сообщение с идентификатором <%1> возникла ошибка.
        |
        |Информация об ошибке: %2", ИдентификаторСообщения, ПодробноеПредставлениеОшибки);
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.МенеджерПотоковОбработкиВходящихСообщений", УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
    КонецПопытки;
КонецПроцедуры

// Функция - Получить данные очереди по идентификатору
//
// Параметры:
//  ИдентификаторСообщения     -  УникальныйИдентификатор  -  Идентификатор сообщения по которому будут получены данные
//  СписокПолей                 - Строка                    - Строка содержащая перечисления полей перечисленных через запятую.
// 
// Возвращаемое значение:
//  Структура - Структура данных сообщения. См. функцию ПолучитьШаблонСтруктурыСообщенияОчереди
//
Функция ПолучитьДанныеОчередиПоИдентификатору(ИдентификаторСообщения, СписокПолей) Экспорт
	СтруктураСообщения = Новый Структура;
    
    МассивПолей = СтрРазделить(СписокПолей, ",",Ложь);
    Если МассивПолей.Количество() = 0 Тогда
    	ВызватьИсключение "Список полей - не может быть пустым!";
    КонецЕсли;

    ШаблонПоля = "    инт_ОчередьВходящихСообщений.%1 КАК %1";
    ТекстВыборка = "";
    ЭтоПервоеПоле = Истина;
    Для Каждого Поле Из МассивПолей Цикл
        ТекстВыборка = ТекстВыборка +?(ЭтоПервоеПоле,"",",")+Символы.ПС+ СтрШаблон(ШаблонПоля, СокрЛП(Поле));
        ЭтоПервоеПоле = Ложь;
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = СтрШаблон("ВЫБРАТЬ
                   |    %1
                   |ИЗ
                   |    РегистрСведений.инт_ОчередьВходящихСообщений КАК инт_ОчередьВходящихСообщений
                   |ГДЕ
                   |    инт_ОчередьВходящихСообщений.ИдентификаторСообщения = &ИдентификаторСообщения", ТекстВыборка);
    Запрос.УстановитьПараметр("ИдентификаторСообщения",ИдентификаторСообщения);
    Выборка = Запрос.Выполнить().Выбрать();
    Если выборка.Следующий() Тогда
            
        Для Каждого Поле Из МассивПолей Цикл
           	    СтруктураСообщения.Вставить(СокрЛП(Поле),?(СокрЛП(Поле)="ВходящееСообщение",Выборка[СокрЛП(Поле)].Получить(),Выборка[СокрЛП(Поле)]));
        КонецЦикла;
    КонецЕсли;
    Возврат СтруктураСообщения;
КонецФункции

// Процедура - Удалить сообщение из очереди по идентификатору
// Удаляет из очереди сообщение, а так же всю связанную с ним информацию из смежных регистров.
// Параметры:
//  ИдентификаторСообщения	 - УникальныйИдентификатор	- Уникальный идентификатор сообщения. 
//
Процедура УдалитьСообщениеИзОчередиПоИдентификатору(ИдентификаторСообщения) Экспорт

	НачатьТранзакцию();
	Попытка
		РегистрыСведений.инт_ТекущийСтатусВходящихСообщений.УдалитьЗаписьПоИдентификатору(ИдентификаторСообщения);
		РегистрыСведений.инт_ИсторияСтатусовВходящихСообщений.ОчиститьИсториюПоИдентификатору(ИдентификаторСообщения);
		
		Запись = РегистрыСведений.инт_ОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСообщения = ИдентификаторСообщения;
		Запись.Удалить();
		
		ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
		
		СообщениеОбОшибке = СтрШаблон("При попытке удаления информации о сообщении с идентификатором <%1> возникла ошибка!
		|
		|ИнформацияОбОшибке: %2",
		ИдентификаторСообщения,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.ОчередьВходящихСообщений", УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
