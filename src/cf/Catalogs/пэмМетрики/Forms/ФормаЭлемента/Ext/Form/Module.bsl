////////////////////////////////////////////////////////////////////////////////
// пэмМетрики
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Алгоритм ="
		|//Пример:		
		|//ТаблицаЗначений = Новый ТаблицаЗначений;
		|//ТаблицаЗначений.Колонки.Добавить(""label"", Новый ОписаниеТипов(""Строка""));
		|//ТаблицаЗначений.Колонки.Добавить(""value"", Новый ОписаниеТипов(""Число""));
		|//
		|//ГСЧ = Новый ГенераторСлучайныхЧисел();
		|//
		|//НоваяСтрока = ТаблицаЗначений.добавить();
		|//НоваяСтрока.label = ""Показатель_1"";
		|//НоваяСтрока.value = 	ГСЧ.СлучайноеЧисло(0,100);
		|//
		|//НоваяСтрока = ТаблицаЗначений.добавить();
		|//НоваяСтрока.label = ""Показатель_2"";
		|//НоваяСтрока.value = ГСЧ.СлучайноеЧисло(0,50);";
		
	КонецЕсли;
	ИТКВ_РедакторКодаКлиент.Инициализация(ЭтотОбъект, "РедакторКода");
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("ВсегдаИспользоватьMonaco", Истина);
    ДополнительныеПараметры.Вставить("Подсказка", ТекстПодсказки());
    ИТКВ_РедакторКода.Инициализация(ЭтотОбъект, "РедакторКода", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыРегламентногоЗадания = пэмМетрикиСервер.ПолучитьПараметрыРегламентногоЗадания(Объект.ИдентификаторРегламента);
	 	 					
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Алгоритм = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ПараметрыРегламентногоЗадания.Предопределенное Тогда
		ПараметрыРегламентногоЗадания.Наименование = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Наименование;
		ПараметрыРегламентногоЗадания.Ключ = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Ключ;
		ПараметрыРегламентногоЗадания.Параметры = Неопределено;
	Иначе
		НаименованиеРегламента = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Наименование;
		НаименованиеРегламента = СтрЗаменить(НаименованиеРегламента,"(Общий регламент)","(Метрика: " + ТекущийОбъект.Код + ")");
		ПараметрыРегламентногоЗадания.Наименование = НаименованиеРегламента;
		
		КлючРегламента = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Ключ + " " + ТекущийОбъект.Код;
		ПараметрыРегламентногоЗадания.Ключ = КлючРегламента;
		
		ПараметрыРегламента = Новый Массив;
		ПараметрыРегламента.Добавить(ТекущийОбъект.Код);
		ПараметрыРегламентногоЗадания.Параметры = ПараметрыРегламента;
		
		ПараметрыРегламентногоЗадания.Использование = ТекущийОбъект.Активность;
	КонецЕсли;
		      		
	пэмМетрикиСервер.ОбновитьРегламентноеЗадание(ПараметрыРегламентногоЗадания);
	ТекущийОбъект.ИдентификаторРегламента = ПараметрыРегламентногоЗадания.УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МаскаИмениМетрики = "[a-zA-Z_:][a-zA-Z0-9_:]*";
	
	Результат = пэмМетрикиСервер.ПроверитьСтрокуНаСоответствиеМаске(Объект.Код,МаскаИмениМетрики);
	Если Результат.ЕстьОшибка Тогда
		Отказ = Истина;
		Сообщить("Имя метрики не соответствует маске: " + МаскаИмениМетрики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональноеРасписаниеПриИзменении(Элемент)
	
	ПараметрыРегламентногоЗадания.Предопределенное = НЕ ПерсональноеРасписание;
	Если ПерсональноеРасписание Тогда
		ПараметрыРегламентногоЗадания.Использование = Истина;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодПолученияМетрикиПриИзменении(Элемент)
	
	ПерсональноеРасписание = Ложь;
	ПараметрыРегламентногоЗадания.Предопределенное = НЕ ПерсональноеРасписание;
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеМетодаДоставкиМетрикиНажатие(Элемент)
	
	Если ПараметрыРегламентногоЗадания.Предопределенное Тогда
		ОткрытьФорму("ОбщаяФорма.пэмНастройкиМетрик");
	Иначе
		пэмМетрикиКлиент.ОбработатьИзменениеРасписания(ПараметрыРегламентногоЗадания, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьПроверкуАлгоритма(Команда)
	Объект.Алгоритм = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
	ВыполнитьПроверкуАлгоритмаРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ИТКВ_ОбщийКлиент.ОткрытьНастройки(ЭтотОбъект, ИТКВ_Перечисления.ИнструментКонсольРазработчика());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ОбновитьСостояниеФормы() Экспорт
	
	КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullRed;
	ПерсональноеРасписание = НЕ ПараметрыРегламентногоЗадания.Предопределенное;
	
	Если Объект.МетодПолученияМетрики = ПредопределенноеЗначение("Перечисление.пэмМетодыПолученияМетрик.Pull") Тогда
		Если Объект.Активность Тогда
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullGreen;
		Иначе
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullRed;
		КонецЕсли;
		ДоступенВыборПерсональногоРасписания = Ложь;
		ПредставлениеРасписания = НСтр("ru = 'Расписание доставки определяется настройками Prometheus'");
	Иначе
		Если Объект.Активность И ПараметрыРегламентногоЗадания.Использование И пэмМетрикиВызовСервера.РазрешеноИспользованиеМетодаPush() Тогда
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPushGreen;
		Иначе
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPushRed;
		КонецЕсли;
		ПредставлениеРасписания = пэмМетрикиКлиент.ПолучитьПредставлениеРасписания(ПараметрыРегламентногоЗадания);
		ДоступенВыборПерсональногоРасписания = Истина;
	КонецЕсли;
	
	Элементы.ОписаниеМетодаДоставкиМетрики.Заголовок = ПредставлениеРасписания;
	Элементы.ПерсональноеРасписание.Доступность = ДоступенВыборПерсональногоРасписания;
	Элементы.СостояниеМетодаДоставки.Картинка = КартинкаСостояниеМетодаДоставки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуАлгоритмаРасчетаНаСервере()
	
	сткВозврат = пэмМетрикиСервер.СформироватьМетрику(Объект.Алгоритм);
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе расчета.
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	           		
	сткВозврат = пэмМетрикиСервер.ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Объект.Код, Объект.ТипМетрики, сткВозврат.МетрикаТаблицей);
	
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе преобразования.
		||Итоговая метрика:" +
		Символы.ПС + сткВозврат.МетрикаСтрокой + "
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;

	КонецЕсли;
	
	Сообщить("Проверка алгоритма расчета завершена.
			 |Итоговая метрика:" +
			 Символы.ПС + сткВозврат.МетрикаСтрокой);

КонецПроцедуры

&НаСервере
Функция ТекстПодсказки()
	Возврат "
		|В результате работы алгоритма должна получиться таблица значений с именем ""ТаблицаЗначений""
		|Обязательным является наличие колонки ""value""
		|В случае необходимости можно добавить дополнительные колонки, выполняющие фунции разделителей метрик
		|Имена колонок должны состоять только из латинских символов
		|Тип содержимого колонки ""value"" - ""Число""
		|Тип содержимого остальных колонок - ""Строка""";
КонецФункции

&НаКлиенте
Процедура ИТКВ_ПодключаемыйДокументСформирован(Элемент)
         
    ИТКВ_РедакторКодаКлиент.ДополнительнаяИнициализация(ЭтотОбъект, Элемент);
    ПодключаемыйЗагрузитьСостояниеРедактораКода();
    
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйВосстановлениеФокусаРедактора() Экспорт
	
	ИТКВ_РедакторКодаКлиент.ВосстановлениеФокусаРедактора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗагрузитьСостояниеРедактораКода()

	ЭлементТекст = Элементы.РедакторКода;
	
	Если ЭлементТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИТКВ_РедакторКодаКлиент.Инициализирован(ЭлементТекст) Тогда
		
		ПодключитьОбработчикОжидания("ПодключаемыйЗагрузитьСостояниеРедактораКода", 0.1, Истина);
		Возврат;
		
    КонецЕсли;
    
	ИТКВ_РедакторКодаКлиент.УстановитьДоступностьРедактирования(ЭтотОбъект, ЭлементТекст, Истина);
	ИТКВ_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, ЭлементТекст, Объект.Алгоритм);
		
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
			ИмяОбработчика = "ОбработкаКодПриИзменении";
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
	ИТКВ_РедакторКодаКлиент.ОбработкаСобытий(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемаяКомандаРедакторКодаОбработчик(Команда)
	
	ДополнительныеПараметры = Новый Структура;
    //ДополнительныеПараметры.Вставить("UID", ТекущаяСтрока.UID);
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.НовыйЭлемент(ИТКВ_Перечисления.ЭлементДанныхКод());
    Данные.Вставить("Текст", ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода"));
	ДополнительныеПараметры.Вставить("Данные", Данные);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаКомандыРедактораКодаЗавершена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИмяКоманды = Команда.Имя;
	ИТКВ_РедакторКодаКлиент.ПодключаемыйОбработчикКоманд(ЭтотОбъект, ИмяКоманды, ОповещениеОЗавершении);
	
	Если СтрНайти(ИмяКоманды, "ЗафиксироватьИзменения") Тогда
		ИТКВ_КонсольРазработчикаДанныеКлиентСервер.СброситьОригинальныйТекст(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыРедактораКодаЗавершена(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИТКВ_РедакторКодаКлиент.СтандартныйОбработчикЗавершенияКоманды(Результат, ДополнительныеПараметры);
		
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Текст", Результат);
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	
	ПодключаемыйЗагрузитьСостояниеРедактораКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстКод = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    
КонецПроцедуры

#КонецОбласти
