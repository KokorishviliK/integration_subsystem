
///////////////////////////////////////////////////////////////////////////////
// инт_ПотокиДанных.ФормаЭлемента
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ИТК_РедакторКодаКлиент.Инициализация(ЭтотОбъект, "РедакторКода");
    
    //ИТК_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, "РедакторКода", Объект.ТекстОбработчика);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("ВсегдаИспользоватьMonaco", Истина);
    ИТК_РедакторКода.Инициализация(ЭтотОбъект, "РедакторКода", ЭтотОбъект, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
   Объект.ТекстОбработчика = ИТК_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
    ИТК_ОбщийКлиент.ОткрытьНастройки(ЭтотОбъект, ИТК_Перечисления.ИнструментКонсольРазработчика());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИТК_ПодключаемыйДокументСформирован(Элемент)
    
    ДополнительныеПараметры = Новый Структура;
        
    ИТК_РедакторКодаКлиент.ДополнительнаяИнициализация(ЭтотОбъект, Элемент, ДополнительныеПараметры);
    ПодключаемыйЗагрузитьСостояниеРедактораКода();
    
КонецПроцедуры

&НаКлиенте
Процедура ИТК_ПодключаемыйВосстановлениеФокусаРедактора() Экспорт
	
	ИТК_РедакторКодаКлиент.ВосстановлениеФокусаРедактора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗагрузитьСостояниеРедактораКода()

	ЭлементТекст = Элементы.РедакторКода;
	
	Если ЭлементТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИТК_РедакторКодаКлиент.Инициализирован(ЭлементТекст) Тогда
		
		ПодключитьОбработчикОжидания("ПодключаемыйЗагрузитьСостояниеРедактораКода", 0.1, Истина);
		Возврат;
		
    КонецЕсли;
    
	ИТК_РедакторКодаКлиент.УстановитьДоступностьРедактирования(ЭтотОбъект, ЭлементТекст, Истина);
	ИТК_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, ЭлементТекст, Объект.ТекстОбработчика);
		
КонецПроцедуры

&НаКлиенте
Процедура ИТК_ПодключаемыйПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
			ИмяОбработчика = "ОбработкаКодПриИзменении";
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
	ИТК_РедакторКодаКлиент.ОбработкаСобытий(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИТК_ПодключаемаяКомандаРедакторКодаОбработчик(Команда)
	
	ДополнительныеПараметры = Новый Структура;
    //ДополнительныеПараметры.Вставить("UID", ТекущаяСтрока.UID);
	
	Данные = ИТК_КонсольРазработчикаДанныеКлиентСервер.НовыйЭлемент(ИТК_Перечисления.ЭлементДанныхКод());
    Данные.Вставить("Текст", ИТК_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода"));
	ДополнительныеПараметры.Вставить("Данные", Данные);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаКомандыРедактораКодаЗавершена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИмяКоманды = Команда.Имя;
	ИТК_РедакторКодаКлиент.ПодключаемыйОбработчикКоманд(ЭтотОбъект, ИмяКоманды, ОповещениеОЗавершении);
	
	Если СтрНайти(ИмяКоманды, "ЗафиксироватьИзменения") Тогда
		ИТК_КонсольРазработчикаДанныеКлиентСервер.СброситьОригинальныйТекст(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыРедактораКодаЗавершена(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИТК_РедакторКодаКлиент.СтандартныйОбработчикЗавершенияКоманды(Результат, ДополнительныеПараметры);
		
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Текст", Результат);
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	
    //ИТК_КонсольРазработчикаДанныеКлиент.ИзменитьПоля(ЭтотОбъект, НайденнаяСтрока, ИзменяемыеПоля);
	
	ПодключаемыйЗагрузитьСостояниеРедактораКода();
	
    //ОбновитьСтруктуруЗапросов(ТекущаяСтрока);
    //ПроверитьПоказатьОшибку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстКод = ИТК_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    // ИТК_КонсольРазработчикаДанныеКлиент.ИзменитьПоле(ЭтотОбъект, ТекущаяСтрока, "Текст", ТекстКод);
	
КонецПроцедуры

#КонецОбласти
