
///////////////////////////////////////////////////////////////////////////////
// инт_ПотокиДанных.ФормаЭлемента
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ИТКВ_РедакторКодаКлиент.Инициализация(ЭтотОбъект, "РедакторКода");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("ВсегдаИспользоватьMonaco", Истина);
    ДополнительныеПараметры.Вставить("Подсказка", ТекстПодсказки());
    ИТКВ_РедакторКода.Инициализация(ЭтотОбъект, "РедакторКода", ЭтотОбъект, ДополнительныеПараметры);
    
    ЗаполнитьСписокВыбораИмяСхемПакета();
    ОбновитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
   Объект.ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
   
   ВалидироватьПередЗаписью = Истина;
   Если ПараметрыЗаписи.Свойство("ВалидироватьПередЗаписью") Тогда
	   ВалидироватьПередЗаписью = ПараметрыЗаписи.ВалидироватьПередЗаписью;
   КонецЕсли;
   Если ВалидироватьПередЗаписью И Не ПроверкаПрошлаУспешно() Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "При проверке потока обнаружены ошибки!
		|Все равно записать?",РежимДиалогаВопрос.ДаНет, 60);
   КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СхемаДанныхПриИзменении(Элемент)
   	ЗаполнитьСписокВыбораИмяСхемПакета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПроверитьПоПримеру(Команда)
	ОчиститьСообщения();
	Объект.ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
	Если ПроверкаПрошлаУспешно() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проверка прошла успешно!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
    ИТКВ_ОбщийКлиент.ОткрытьНастройки(ЭтотОбъект, ИТКВ_Перечисления.ИнструментКонсольРазработчика());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИТКВ_ПодключаемыйДокументСформирован(Элемент)
    ДополнительныеПараметры = Новый Структура("ПользовательскиеОбъекты", СобратьПользовательскиеОбъекты());
         
    ИТКВ_РедакторКодаКлиент.ДополнительнаяИнициализация(ЭтотОбъект, Элемент, ДополнительныеПараметры);
    ПодключаемыйЗагрузитьСостояниеРедактораКода();
    
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйВосстановлениеФокусаРедактора() Экспорт
	
	ИТКВ_РедакторКодаКлиент.ВосстановлениеФокусаРедактора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗагрузитьСостояниеРедактораКода()

	ЭлементТекст = Элементы.РедакторКода;
	
	Если ЭлементТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИТКВ_РедакторКодаКлиент.Инициализирован(ЭлементТекст) Тогда
		
		ПодключитьОбработчикОжидания("ПодключаемыйЗагрузитьСостояниеРедактораКода", 0.1, Истина);
		Возврат;
		
    КонецЕсли;
    
	ИТКВ_РедакторКодаКлиент.УстановитьДоступностьРедактирования(ЭтотОбъект, ЭлементТекст, Истина);
	ИТКВ_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, ЭлементТекст, Объект.ТекстОбработчика);
		
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
			ИмяОбработчика = "ОбработкаКодПриИзменении";
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
	ИТКВ_РедакторКодаКлиент.ОбработкаСобытий(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемаяКомандаРедакторКодаОбработчик(Команда)
	
	ДополнительныеПараметры = Новый Структура;
    //ДополнительныеПараметры.Вставить("UID", ТекущаяСтрока.UID);
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.НовыйЭлемент(ИТКВ_Перечисления.ЭлементДанныхКод());
    Данные.Вставить("Текст", ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода"));
	ДополнительныеПараметры.Вставить("Данные", Данные);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаКомандыРедактораКодаЗавершена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИмяКоманды = Команда.Имя;
	ИТКВ_РедакторКодаКлиент.ПодключаемыйОбработчикКоманд(ЭтотОбъект, ИмяКоманды, ОповещениеОЗавершении);
	
	Если СтрНайти(ИмяКоманды, "ЗафиксироватьИзменения") Тогда
		ИТКВ_КонсольРазработчикаДанныеКлиентСервер.СброситьОригинальныйТекст(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыРедактораКодаЗавершена(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИТКВ_РедакторКодаКлиент.СтандартныйОбработчикЗавершенияКоманды(Результат, ДополнительныеПараметры);
		
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Текст", Результат);
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	
	ПодключаемыйЗагрузитьСостояниеРедактораКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстКод = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    
КонецПроцедуры

&НаКлиенте
Функция СобратьПользовательскиеОбъекты()
    ПользовательскиеОбъекты = Новый Структура;
    
    ПользовательскиеОбъекты.Вставить("Результат", СобратьОписаниеОжидаемогоРезультата());
    ПользовательскиеОбъекты.Вставить("ИсходныеДанные",СобратьОписаниеИсходныхДанных());
    
    Возврат ПользовательскиеОбъекты;
КонецФункции

&НаКлиенте
Функция СобратьОписаниеОжидаемогоРезультата() Экспорт;
    
   // TODO: !!!! Собирать описание ожидаемого результата, по OpenApi Схеме!!!!
   
   Результат = Новый структура;
   
   Результат.Вставить("ref", "classes.Соответствие");
   Результат.Вставить("description", "Соответствие содержащее сериализованную и подготовленную информацию, которая сможет пройти валидацию по схеме.");
   
   СтруктураПараметра = Новый Структура("ref, name, description", "catalogs.инт_ПотокиДанных", "Dataflow", "Поток данных");
   СтруктураПараметров = Новый Структура("Dataflow", СтруктураПараметра);
   Результат.Вставить("properties", СтруктураПараметров);
   
   Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СобратьОписаниеИсходныхДанных()
    Если НЕ ЗначениеЗаполнено(Объект.Пример) Тогда
    	Возврат Неопределено;
    КонецЕсли;
    
    Возврат СобратьОписаниеИсходныхДанныхНаСервереБезКонтекста(Объект.Пример);
КонецФункции

&НаСервереБезКонтекста
Функция СобратьОписаниеИсходныхДанныхНаСервереБезКонтекста(Ссылка)
    МетаданныеОбъекта = Ссылка.Метаданные();
    Части = СтрРазделить(Нрег(МетаданныеОбъекта.ПолноеИмя()), ".");
    ИмяКоллекцииMonaco = ИТКВ_РедакторКодаКлиентСерверПовтИсп.ИмяКоллекцииМетаданныхПоТипу(Части[0]);
    ИсходныеДанные = Новый Структура;
    ИсходныеДанные.Вставить("ref",СтрШаблон("%1.%2", ИмяКоллекцииMonaco, МетаданныеОбъекта.Имя));
    ИсходныеДанные.Вставить("description", "Ссылка на объект, который служит исходными данными для сообщения");
    
    Возврат ИсходныеДанные;
КонецФункции

&НаКлиенте
Процедура ПримерПриИзменении(Элемент)
    
    Объект.ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    ИТКВ_ПодключаемыйДокументСформирован(Элементы.РедакторКода)

КонецПроцедуры

&НаСервере
Функция ТекстПодсказки()
	Возврат "Возврат результата производится через переменную ""Результат""
    |Переменная ""ИсходныеДанные"" Содержит ссылку на обрабатываемый объект. Выберите объект для примера, и вы получите контекстную подсказку основанную на типе примера.";
КонецФункции

&НаСервере
Процедура ПроверитьПоПримеруНаСервере()
	Если Объект.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Исходящий Тогда
		Справочники.инт_ПотокиДанных.СформироватьСообщениеПоПотоку(Объект.Пример, Объект);
	Иначе
		Соответствие = ДесериализоватьИВалидироватьТестовыеДанные();
		Если Соответствие = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Справочники.инт_ПотокиДанных.ОбработатьВходящееСообщениеПоПотоку(ТестовыеДанные, Объект, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДесериализоватьИВалидироватьТестовыеДанные()
	Попытка
		Соответствие = инт_КоннекторHTTP.JsonВОбъект(ТестовыеДанные);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось разобрать Json.";
		Сообщение.Поле = "ТестовыеДанные";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
	Справочники.инт_ПотокиДанных.ВалидироватьСообщениеПоПотоку(Соответствие, Объект);
	Возврат Соответствие;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораИмяСхемПакета()
    Элементы.ИмяСхемыПакета.СписокВыбора.ЗагрузитьЗначения(Справочники.инт_Схемы.МассивИменПакетовПоСхеме(Объект.СхемаДанных));
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовФормы()
    
	Элементы.АсинхроннаяОбработка.Видимость = Объект.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Входящий;
    Элементы.ГруппаПодписчики.Видимость = Объект.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Исходящий;
    Элементы.Пример.Видимость = Объект.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Исходящий;
	Элементы.ТестовыеДанные.Видимость = Объект.НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Входящий;
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПотокаПриИзменении(Элемент)
    ОбновитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюОбОшибке(Ошибка)
	ОшибкаВалидации = СтрНайти(НРег(Ошибка.Описание), "валидаци")> 0;
	
	Если ОшибкаВалидации Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ошибка.Описание;
		Сообщение.ПутьКДанным = "Объект.ИмяСхемыПакета";
		Сообщение.Сообщить();
	Иначе
		
		Если Ошибка.Описание = "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода" И НЕ Ошибка.Причина = Неопределено Тогда
			// Это синтаксическая ошибка... Разбираем ее                                 
			Структура = ИТКВ_ЗапросКлиентСервер.ИнформацияООшибке(Ошибка.Причина.Описание);
			ИТКВ_РедакторКодаКлиент.ПоказатьОшибку(Элементы.РедакторКода, Структура.НомерСтроки, Структура.НомерСтолбца);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Структура.Текст;
			Сообщение.Сообщить();
		Иначе
			ИТКВ_РедакторКодаКлиент.ПоказатьОшибку(Элементы.РедакторКода, Ошибка.НомерСтроки);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = КраткоеПредставлениеОшибки(Ошибка);
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПрошлаУспешно()
	Попытка
		ПроверитьПоПримеруНаСервере();
	Исключение
		ВывестиИнформациюОбОшибке(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

//Вынести в отдельную процедуру
&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать(Новый Структура("ВалидироватьПередЗаписью", Ложь));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
