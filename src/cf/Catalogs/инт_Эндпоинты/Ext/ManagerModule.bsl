// BSLLS:DuplicateStringLiteral-off
// BSLLS:Typo-off
////////////////////////////////////////////////////////////////////////////////
// инт_Эндпоинты
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Процедура - Метод создает на форме группу для управления ссылкой и авторизацией удаленного ресурса.
// Метод должен быть вызван приСозданииНаСервере
//
// Параметры:
//  Форма			 -  ФормаКлиентскогоПриложения	 -  Форма на которую добавляются элементы.
//  СсылкаНаЭндпоинт - 	СправочникСсылка.инт_Эндпоинты - Ссылка на эндпоинт, хранимая в заполняемом объекте
//  Родитель		 - Элементы	 -  Элемент формы родитель.
//  Перед			 - ЭлементФормы, Строка	 - Элемент формы(или его имя) Перед которым разместить группу. 
//
Процедура ДобавитьИнформациюОбЭндпоинтеНаФорму(Форма, СсылкаНаЭндпоинт, Родитель = Неопределено, Перед = "") Экспорт
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Заголовок = инт_ЭндпоинтыКлиентСервер.СформироватьЗаголовок(СсылкаНаЭндпоинт.АдресРесурса);
	
	ГруппаФормы = инт_ДинамическоеФормированиеИнтерфейса.СздГруппаОбычная(Форма,
																			инт_ЭндпоинтыКлиентСервер.ИмяГруппыЭндпоинт(),
																			Родитель,
																			Заголовок,
																			1,
																			0,
																			0,
																			Новый Структура("Поведение", ПоведениеОбычнойГруппы.Всплывающая),
																			Перед);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(),
															Метаданные.Справочники.инт_Эндпоинты.Реквизиты.АдресРесурса.Тип);

	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(),
															Метаданные.Справочники.инт_Эндпоинты.Реквизиты.ТипАвторизации.Тип);
	
	СтруктураСобытийЭндпоинт = Новый Структура("ПриИзменении", "АдресРесурсаПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма,
													инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(),
													ГруппаФормы,
													"Адрес ресурса",
													1,
													инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(),
													,
													СтруктураСобытийЭндпоинт);
	
	СтруктураСобытийТипАвторизации = Новый Структура("ПриИзменении", "ТипАвторизацииПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма,
													инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(),
													ГруппаФормы,
													"Тип авторизации",
													1,
													инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(),
													,
													СтруктураСобытийТипАвторизации);
	
	ГруппаСтраниц = инт_ДинамическоеФормированиеИнтерфейса.СздГруппаСтраниц(Форма,
																			инт_ЭндпоинтыКлиентСервер.ИмяГруппыСтраниц(),
																			ГруппаФормы,
																			,
																			,
																			,
																			Новый Структура("ОтображениеСтраниц", ОтображениеСтраницФормы.Нет));
	СоздатьСтраницуБазовойАвторизации(Форма, ГруппаСтраниц);
	СоздатьСтраницуBearer(Форма, ГруппаСтраниц);
	СоздатьСтраницуБезАвторизации(Форма, ГруппаСтраниц);
	
	ЗаполнитьЗначенияРеквизитовПоСсылке(Форма, СсылкаНаЭндпоинт);
КонецПроцедуры

// Функция - Создать обновить эндпоинт
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 -  Форма из которой происходит вызов
//  СсылкаНаЭндпоинт - 	СправочникСсылка.инт_Эндпоинты - Ссылка на эндпоинт, если она есть.
// 
// Возвращаемое значение:
//  СправочникСсылка.инт_Эндпоинты - Созданный(обновленный) элемент.
//
Функция СоздатьОбновитьЭндпоинт(Форма, СсылкаНаЭндпоинт) Экспорт
	Если ЗначениеЗаполнено(СсылкаНаЭндпоинт) Тогда
		ЭндпоинтОбъект = СсылкаНаЭндпоинт.ПолучитьОбъект();
	Иначе
		ЭндпоинтОбъект = Справочники.инт_Эндпоинты.СоздатьЭлемент();
	КонецЕсли;
	
	ЭндпоинтОбъект.Наименование = Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()];
	ЭндпоинтОбъект.АдресРесурса = Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()];
	ЭндпоинтОбъект.ТипАвторизации = Форма[инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации()];
	
	ЭндпоинтОбъект.Записать();

	ОбновитьВБезопасномХранилище(Форма, ЭндпоинтОбъект.Ссылка, "Basic_Пользователь");
	ОбновитьВБезопасномХранилище(Форма, ЭндпоинтОбъект.Ссылка, "Basic_Пароль", "Basic_ПарольИзменен");
	ОбновитьВБезопасномХранилище(Форма, ЭндпоинтОбъект.Ссылка, "Bearer_Токен", "Bearer_ТокенИзменен");
	
	Возврат ЭндпоинтОбъект.Ссылка;
КонецФункции

// Процедура - Удалить эндпоинт
//
// Параметры:
//  Эндпоинт - 	СправочникСсылка.инт_Эндпоинты - Ссылка на эндпоинт
//
Процедура УдалитьЭндпоинт(Эндпоинт) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Эндпоинт) Тогда
		Возврат;
	КонецЕсли;
	
	ЭндпоинтОбъект = Эндпоинт.ПолучитьОбъект();
	
	ЭндпоинтОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Функция - Структура параметров соединения
//
// Параметры:
//  Эндпоинт - 	СправочникСсылка.инт_Эндпоинты - Ссылка на эндпоинт
// 
// Возвращаемое значение:
//  Структура - Структура параметров соединения
//		* АдресРесурса - Строка - Строка адреса удаленного ресурса
//		* Сессия - Структура - см. инт_Коннектор.НоваяСессия()
//
Функция СтруктураПараметровСоединения(Эндпоинт) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресРесурса", Эндпоинт.АдресРесурса);
	СтруктураПараметров.Вставить("Сессия", ПолучитьСессию(Эндпоинт));
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура СоздатьСтраницуБазовойАвторизации(Форма, ГруппаСтраниц)
	Страница = инт_ДинамическоеФормированиеИнтерфейса.СздСтраница(Форма,
																	Строка(Перечисления.инт_ТипыАвторизации.Basic),
																	ГруппаСтраниц, ,
																	1);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															"Basic_Пользователь",
															инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());

	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															"Basic_Пароль",
															инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());

	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															"Basic_ПарольИзменен",
															инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаБулево());
	
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма,
													"Basic_Пользователь",
													Страница,
													"Пользователь",
													1,
													"Basic_Пользователь");
	СтруктураСобытийПароль = Новый Структура("ПриИзменении", "Basic_ПарольПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма,
													"Basic_Пароль",
													Страница,
													"Пароль",
													1,
													"Basic_Пароль",
													Новый Структура("РежимПароля", Истина),
													СтруктураСобытийПароль);
	
КонецПроцедуры

Процедура СоздатьСтраницуBearer(Форма, ГруппаСтраниц)
	Страница = инт_ДинамическоеФормированиеИнтерфейса.СздСтраница(Форма,
																	Строка(Перечисления.инт_ТипыАвторизации.Bearer),
																	ГруппаСтраниц,
																	,
																	1);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
															"Bearer_Токен",
															инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());

	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма,
																"Bearer_ТокенИзменен",
																инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаБулево());
	СтруктураСобытийBearer_Токен = Новый Структура("ПриИзменении", // BSLLS:LatinAndCyrillicSymbolInWord-off
													"Bearer_ТокенПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма,
													"Bearer_Токен",
													Страница,
													"Токен",
													1,
													"Bearer_Токен",
													Новый Структура("РежимПароля", Истина),
													СтруктураСобытийBearer_Токен);
	
КонецПроцедуры

Процедура СоздатьСтраницуБезАвторизации(Форма, ГруппаСтраниц)
	Страница = инт_ДинамическоеФормированиеИнтерфейса.СздСтраница(Форма,
																	Строка(Перечисления.инт_ТипыАвторизации.Анонимный),
																	ГруппаСтраниц,
																	,
																	1);

	Надпись = инт_ДинамическоеФормированиеИнтерфейса.СздДекорацияНадпись(Форма,
																			"НадписьАвторизацияНеТребуется",
																			Страница, "Авторизация не требуется");
	Надпись.ЦветТекста = ЦветаСтиля.ЦветАкцента;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовПоСсылке(Форма, СсылкаНаЭндпоинт)
	Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()] = СсылкаНаЭндпоинт.АдресРесурса;
	Форма[инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации()] = ?(ЗначениеЗаполнено(СсылкаНаЭндпоинт.ТипАвторизации),
																					 СсылкаНаЭндпоинт.ТипАвторизации,
																					 Перечисления.инт_ТипыАвторизации.Анонимный);

	Basic_ПользовательИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Basic_Пользователь");
	Basic_ПарольИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Basic_Пароль");
	Bearer_ТокенИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Bearer_Токен");
	
	Форма["Basic_Пользователь"] = Basic_ПользовательИзХранилища;
	Форма["Basic_Пароль"] = ?(ЗначениеЗаполнено(Basic_ПарольИзХранилища), Форма.УникальныйИдентификатор, "");
	Форма["Bearer_Токен"] = ?(ЗначениеЗаполнено(Bearer_ТокенИзХранилища), Форма.УникальныйИдентификатор, "");

	ИмяГруппыСтраниц = инт_ЭндпоинтыКлиентСервер.ИмяГруппыСтраниц();
	ИмяТипАвторизации = инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации();
	Форма.Элементы[ИмяГруппыСтраниц].ТекущаяСтраница = Форма.Элементы[Строка(Форма[ИмяТипАвторизации])];
КонецПроцедуры

Функция ПолучитьСессию(Эндпоинт)
	Сессия = инт_КоннекторHTTP.СоздатьСессию();
	Сессия.Вставить("Аутентификация", ЗаполнитьАутентификацию(Эндпоинт));
	
	Возврат Сессия;
	
КонецФункции

Функция ЗаполнитьАутентификацию(Эндпоинт)
	Аутентификация = Новый Структура;
	
	Если Эндпоинт.ТипАвторизации = Перечисления.инт_ТипыАвторизации.Basic Тогда
		Аутентификация.Вставить("Тип", Строка(Перечисления.инт_ТипыАвторизации.Basic));
		
		Basic_ПользовательИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Basic_Пользователь");
		Basic_ПарольИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Basic_Пароль");

		Аутентификация.Вставить("Пользователь", Basic_ПользовательИзХранилища);
		Аутентификация.Вставить("Пароль", Basic_ПарольИзХранилища);
	ИначеЕсли Эндпоинт.ТипАвторизации = Перечисления.инт_ТипыАвторизации.Bearer Тогда
		Аутентификация.Вставить("Тип", Строка(Перечисления.инт_ТипыАвторизации.Bearer));
		Bearer_ТокенИзХранилища = ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Bearer_Токен");
		
		Аутентификация.Вставить("Токен", Bearer_ТокенИзХранилища);
	ИначеЕсли Эндпоинт.ТипАвторизации = Перечисления.инт_ТипыАвторизации.Анонимный Тогда
		Аутентификация = Неопределено;
	Иначе
		СообщениеОбОшибке = СтрШаблон("Для типа авторизации <%1> не задан алгоритм заполнения аутентификации",
										Эндпоинт.ТипАвторизации);
										
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Аутентификация;
КонецФункции

Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключ)
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	Возврат ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключ);
КонецФункции

Процедура ОбновитьВБезопасномХранилище(Форма, Ссылка, Идентификатор, ИмяРеквизитаОтслеживанияИзменений = "")
 Если ИмяРеквизитаОтслеживанияИзменений = "" ИЛИ Форма[ИмяРеквизитаОтслеживанияИзменений] Тогда
  УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
  ИТКВ_БСП.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Форма[Идентификатор], Идентификатор);
  
  УстановитьПривилегированныйРежим(Ложь);
  Если Не ИмяРеквизитаОтслеживанияИзменений = "" Тогда
  	Форма[Идентификатор] = ?(ЗначениеЗаполнено(Форма[Идентификатор]), Форма.УникальныйИдентификатор, "");
	Форма[ИмяРеквизитаОтслеживанияИзменений] = Ложь;
  КонецЕсли;
 КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли

// BSLLS:CommentedCode-off
///////////////////////////////////////////////////////////////////////////////////////////
// Для интеграции справочника на форму, скопируйте дынные команды в модуль формы		 //   
///////////////////////////////////////////////////////////////////////////////////////////
//
//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	Справочники.инт_Эндпоинты.ДобавитьИнформациюОбЭндпоинтеНаФорму(ЭтотОбъект,
//																	Объект.СсылкаНаСхему,
//																		Элементы.ГруппаСсылка,
//																			"ОбновитьJsonИзУдаленногоИсточника");
//КонецПроцедуры
// BSLLS:CommentedCode-on
//
//&НаСервере
//Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	ТекущийОбъект.СсылкаНаСхему = Справочники.инт_Эндпоинты.СоздатьОбновитьЭндпоинт(ЭтотОбъект, 
//																					ТекущийОбъект.СсылкаНаСхему);
//КонецПроцедуры
//
//&НаКлиенте
//Процедура АдресРесурсаПриИзменении(Элемент)
//	инт_ЭндпоинтыКлиент.АдресРесурсаПриИзменении(ЭтотОбъект["АдресРесурса"], ЭтотОбъект);
//	Модифицированность = Истина;
//КонецПроцедуры   
//
//&НаКлиенте
//Процедура ТипАвторизацииПриИзменении(Элемент)
//	инт_ЭндпоинтыКлиент.ТипАвторизацииПриИзменении(ЭтотОбъект["ТипАвторизации"], ЭтотОбъект);
//	Модифицированность = Истина;
//КонецПроцедуры
//
//&НаКлиенте
//Процедура Basic_ПарольПриИзменении(Элемент)
//	Basic_ПарольИзменен = Истина;
//	Модифицированность = Истина;
//КонецПроцедуры
//
//&НаКлиенте
//Процедура Bearer_ТокенПриИзменении(Элемент)
//	Bearer_ТокенИзменен = Истина;
//	Модифицированность = Истина;
//КонецПроцедуры
//
///////////////////////////////////////////////////////////////////////////////////////////
// BSLLS:CommentedCode-on
