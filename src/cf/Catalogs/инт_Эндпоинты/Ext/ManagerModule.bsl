////////////////////////////////////////////////////////////////////////////////
// инт_Эндпоинты
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
Процедура ДобавитьИнформациюОбЭндпоинтеНаФорму(Форма, СсылкаНаЭндпоинт, Родитель = Неопределено, Перед = "") Экспорт
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Заголовок = инт_ЭндпоинтыКлиентСервер.СформироватьЗаголовок(СсылкаНаЭндпоинт.АдресРесурса);
	
	ГруппаФормы = инт_ДинамическоеФормированиеИнтерфейса.СздГруппаОбычная(Форма, инт_ЭндпоинтыКлиентСервер.ИмяГруппыЭндпоинт(), Родитель, Заголовок, 1, 0,0, Новый Структура("Поведение", ПоведениеОбычнойГруппы.Всплывающая), Перед);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма, инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(), Метаданные.Справочники.инт_Эндпоинты.Реквизиты.АдресРесурса.Тип);
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма, инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(), Метаданные.Справочники.инт_Эндпоинты.Реквизиты.ТипАвторизации.Тип);
	
	СтруктураСобытийЭндпоинт = Новый Структура("ПриИзменении", "АдресРесурсаПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма, инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(), ГруппаФормы,, 1, инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса(), ,СтруктураСобытийЭндпоинт);
	
	СтруктураСобытийТипАвторизации = Новый Структура("ПриИзменении", "ТипАвторизацииПриИзменении");
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма, инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(), ГруппаФормы,, 1, инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации(), ,СтруктураСобытийТипАвторизации);
	
	ГруппаСтраниц = инт_ДинамическоеФормированиеИнтерфейса.СздГруппаСтраниц(Форма, инт_ЭндпоинтыКлиентСервер.ИмяГруппыСтраниц(), ГруппаФормы, ,,,Новый Структура("ОтображениеСтраниц", ОтображениеСтраницФормы.Нет));
	СоздатьСтраницуБазовойАвторизации(Форма, ГруппаСтраниц);
	СоздатьСтраницуBearer(Форма, ГруппаСтраниц);
	
	ЗаполнитьЗначенияРеквизитовПоСсылке(Форма, СсылкаНаЭндпоинт);
КонецПроцедуры

Функция СоздатьОбновитьЭндпоинт(Форма, СсылкаНаЭндпоинт) Экспорт
	Если ЗначениеЗаполнено(СсылкаНаЭндпоинт) Тогда
		ЭндпоинтОбъект = СсылкаНаЭндпоинт.ПолучитьОбъект();
	Иначе
		ЭндпоинтОбъект = Справочники.инт_Эндпоинты.СоздатьЭлемент();
	КонецЕсли;
	
	ЭндпоинтОбъект.Наименование = Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()];
	ЭндпоинтОбъект.АдресРесурса = Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()];
	ЭндпоинтОбъект.ТипАвторизации = Форма[инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации()];
	
	ЭндпоинтОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	ИТКВ_БСП.ЗаписатьДанныеВБезопасноеХранилище(ЭндпоинтОбъект.Ссылка, Форма["Basic_Пользователь"], 	"Basic_Пользователь");
	ИТКВ_БСП.ЗаписатьДанныеВБезопасноеХранилище(ЭндпоинтОбъект.Ссылка, Форма["Basic_Пароль"], 		"Basic_Пароль");
	ИТКВ_БСП.ЗаписатьДанныеВБезопасноеХранилище(ЭндпоинтОбъект.Ссылка, Форма["Bearer_Токен"], 		"Bearer_Токен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма["Basic_Пароль"] = ?(ЗначениеЗаполнено(Форма["Basic_Пароль"]), Форма.УникальныйИдентификатор, "");
	Форма["Bearer_Токен"] = ?(ЗначениеЗаполнено(Форма["Bearer_Токен"]), Форма.УникальныйИдентификатор, "");

	Возврат ЭндпоинтОбъект.Ссылка;
КонецФункции

Процедура УдалитьЭндпоинт(Эндпоинт) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Эндпоинт) Тогда
		Возврат;
	КонецЕсли;
	
	ЭндпоинтОбъект = Эндпоинт.ПолучитьОбъект();
	
	ЭндпоинтОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Функция СтруктураПараметровСоединения(Эндпоинт) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресРесурса", Эндпоинт.АдресРесурса);
	СтруктураПараметров.Вставить("Сессия", ПолучитьСессию(Эндпоинт));
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура СоздатьСтраницуБазовойАвторизации(Форма, ГруппаСтраниц)
	Страница = инт_ДинамическоеФормированиеИнтерфейса.СздСтраница(Форма, Строка(Перечисления.инт_ТипыАвторизации.Basic), ГруппаСтраниц,,1);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма, "Basic_Пользователь", инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма, "Basic_Пароль", инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());
	
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма, "Basic_Пользователь", Страница,"Пользователь", 1, "Basic_Пользователь", );
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма, "Basic_Пароль", Страница,"Пароль", 1, "Basic_Пароль", Новый Структура("РежимПароля", Истина));
	
КонецПроцедуры

Процедура СоздатьСтраницуBearer(Форма, ГруппаСтраниц)
	Страница = инт_ДинамическоеФормированиеИнтерфейса.СздСтраница(Форма, Строка(Перечисления.инт_ТипыАвторизации.Bearer), ГруппаСтраниц,,1);
	
	инт_ДинамическоеФормированиеИнтерфейса.СоздатьРеквизит(Форма, "Bearer_Токен", инт_ДинамическоеФормированиеИнтерфейса.ОписаниеТипаСтрока());
	инт_ДинамическоеФормированиеИнтерфейса.СздПоле(Форма, "Bearer_Токен", Страница,"Токен", 1, "Bearer_Токен", Новый Структура("РежимПароля", Истина));
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовПоСсылке(Форма, СсылкаНаЭндпоинт)
	Форма[инт_ЭндпоинтыКлиентСервер.ИмяАдресРесурса()] = СсылкаНаЭндпоинт.АдресРесурса;
	Форма[инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации()] = ?(ЗначениеЗаполнено(СсылкаНаЭндпоинт.ТипАвторизации), СсылкаНаЭндпоинт.ТипАвторизации, Перечисления.инт_ТипыАвторизации.Basic);

	УстановитьПривилегированныйРежим(Истина);
	Basic_ПользовательИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Basic_Пользователь");
	Basic_ПарольИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Basic_Пароль");
	Bearer_ТокенИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(СсылкаНаЭндпоинт, "Bearer_Токен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма["Basic_Пользователь"] = Basic_ПользовательИзХранилища;
	Форма["Basic_Пароль"] = ?(ЗначениеЗаполнено(Basic_ПарольИзХранилища), Форма.УникальныйИдентификатор, "");
	Форма["Bearer_Токен"] = ?(ЗначениеЗаполнено(Bearer_ТокенИзХранилища), Форма.УникальныйИдентификатор, "");

	Форма.Элементы[инт_ЭндпоинтыКлиентСервер.ИмяГруппыСтраниц()].ТекущаяСтраница = Форма.Элементы[Строка(Форма[инт_ЭндпоинтыКлиентСервер.ИмяТипАвторизации()])];
КонецПроцедуры

Функция ПолучитьСессию(Эндпоинт)
	Сессия = инт_КоннекторHTTP.СоздатьСессию();
	Сессия.Вставить("Аутентификация", ЗаполнитьАутентификацию(Эндпоинт));
	
	Возврат Сессия;
	
КонецФункции

Функция ЗаполнитьАутентификацию(Эндпоинт)
	Аутентификация = Новый Структура;
	
	Если Эндпоинт.ТипАвторизации = Перечисления.инт_ТипыАвторизации.Basic Тогда
		Аутентификация.Вставить("Тип", Строка(Перечисления.инт_ТипыАвторизации.Basic));
		УстановитьПривилегированныйРежим(Истина);
		Basic_ПользовательИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Basic_Пользователь");
		Basic_ПарольИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Basic_Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		
		Аутентификация.Вставить("Пользователь", Basic_ПользовательИзХранилища);
		Аутентификация.Вставить("Пароль", Basic_ПарольИзХранилища);
	ИначеЕсли Эндпоинт.ТипАвторизации = Перечисления.инт_ТипыАвторизации.Bearer Тогда
		Аутентификация.Вставить("Тип", Строка(Перечисления.инт_ТипыАвторизации.Bearer));
		
		УстановитьПривилегированныйРежим(Истина);
		Bearer_ТокенИзХранилища = ИТКВ_БСП.ПрочитатьДанныеИзБезопасногоХранилища(Эндпоинт, "Bearer_Токен");
		УстановитьПривилегированныйРежим(Ложь);
		
		Аутентификация.Вставить("Токен", Bearer_ТокенИзХранилища);

	Иначе
		СообщениеОбОшибке = СтрШаблон("Для типа авторизации <%1> не задан агоритм заполнения аутентификации");;
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Аутентификация;
КонецФункции

#КонецОбласти

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////////////////
// Для интеграции справочника на форму, скопируйте дынные команды в модуль формы		 //   
///////////////////////////////////////////////////////////////////////////////////////////

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	Справочники.инт_Эндпоинты.ДобавитьИнформациюОбЭндпоинтеНаФорму(ЭтотОбъект,
//																	Объект.СсылкаНаСхему,
//																		Элементы.ГруппаСсылка,
//																			"ОбновитьJsonИзУдаленногоИсточника");
//КонецПроцедуры

//&НаСервере
//Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	ТекущийОбъект.СсылкаНаСхему = Справочники.инт_Эндпоинты.СоздатьОбновитьЭндпоинт(ЭтотОбъект, 
//																					ТекущийОбъект.СсылкаНаСхему);
//КонецПроцедуры

//&НаКлиенте
//Процедура АдресРесурсаПриИзменении(Элемент)
//	инт_ЭндпоинтыКлиент.АдресРесурсаПриИзменении(ЭтотОбъект["АдресРесурса"], ЭтотОбъект);
//КонецПроцедуры   

//&НаКлиенте
//Процедура ТипАвторизацииПриИзменении(Элемент)
//	инт_ЭндпоинтыКлиент.ТипАвторизацииПриИзменении(ЭтотОбъект["ТипАвторизации"], ЭтотОбъект);
//КонецПроцедуры                                                                      	

///////////////////////////////////////////////////////////////////////////////////////////
