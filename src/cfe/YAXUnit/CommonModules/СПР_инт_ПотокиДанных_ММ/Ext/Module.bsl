// @strict-types

/////////////////////////////////////////////////////////////////////////////////

// Экспортные процедуры и функции, предназначенные для использования другими 

// объектами конфигурации или другими программами

///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт

    ЮТТесты.УдалениеТестовыхДанных().ВТранзакции()
    .ДобавитьТест("ПроверитьФормированиеСообщенияПоПотоку")
    .ДобавитьТест("ВызовФормированияСообщенияПоВходящемуПотокуВызываетИсключение")
    .ДобавитьТест("ПроверкаПолученияПодписчиковПоПотоку")
    .ДобавитьТест("ВалидацияПакетаПоПотоку")
    .ДобавитьТест("ЕслиВалидацияОтключенаВалидацияДолжнаВозвращатьИстину");

КонецПроцедуры

#Область События

Процедура ПередВсемиТестами() Экспорт

КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт

КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт

КонецПроцедуры

Процедура ПослеВсехТестов() Экспорт

КонецПроцедуры

Процедура ПроверитьФормированиеСообщенияПоПотоку() Экспорт
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхИсходящий();
    ИсходныеДанные = ГенераторТестовыхДанных.демо_Документ();
    ЮТест.ОжидаетЧто(Справочники.инт_ПотокиДанных)
    .Метод("СформироватьСообщениеПоПотоку")
    .Параметр(ИсходныеДанные)
    .Параметр(ПотокДанных)
    .НеВыбрасываетИсключение();
    
    СформированноеСообщение = Справочники.инт_ПотокиДанных.СформироватьСообщениеПоПотоку(ИсходныеДанные, ПотокДанных);
    
    ЮТест.ОжидаетЧто(СформированноеСообщение)
    .ИмеетТип(Тип("Соответствие"))
    .Свойство("uuid").Равно(ИсходныеДанные.УникальныйИдентификатор())
    .Свойство("text").ИмеетТип("Строка").Равно(ИсходныеДанные.ДемоРеквизитСтрока)
    .Свойство("items").ИмеетДлину(ИсходныеДанные.Тест.Количество());
    
КонецПроцедуры

Процедура ВызовФормированияСообщенияПоВходящемуПотокуВызываетИсключение() Экспорт
    
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхВходящий();
    ИсходныеДанные = ГенераторТестовыхДанных.демо_Документ();
    
    ЮТест.ОжидаетЧто(Справочники.инт_ПотокиДанных)
    .Метод("СформироватьСообщениеПоПотоку")
    .Параметр(ИсходныеДанные)
    .Параметр(ПотокДанных)
    .ВыбрасываетИсключение("Нельзя формировать сообщения по входящим потокам данных!");
    
КонецПроцедуры

Процедура ПроверкаПолученияПодписчиковПоПотоку() ЭКспорт
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхИсходящий();
    Подписчики = Справочники.инт_ПотокиДанных.ПолучитьПодписчиковПоПотоку(ПотокДанных);
    ЮТест.ОжидаетЧто(Подписчики)
    .имеетТип("Массив")
    .ИмеетДлину(ПотокДанных.ПодписчикиПотока.Количество())
    .Содержит(ПотокДанных.ПодписчикиПотока[0].Подписчик);
    
КонецПроцедуры

Процедура ВалидацияПакетаПоПотоку() Экспорт
   ВызватьИсключение "Тест не реализован";
КонецПроцедуры

Процедура ЕслиВалидацияОтключенаВалидацияДолжнаВозвращатьИстину() Экспорт
	ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхИсходящий();
    Сообщение = Новый Соответствие;
    
    РезультатВалидации = Справочники.инт_ПотокиДанных.ВалидироватьСообщениеПоПотоку(Сообщение, ПотокДанных);
    
    ЮТест.ОжидаетЧто(РезультатВалидации).Равно(Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
