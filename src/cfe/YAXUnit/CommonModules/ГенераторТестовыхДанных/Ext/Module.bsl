////////////////////////////////////////////////////////////////////////////////
// ГенераторТестовыхДанных
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция - Подписчик
// 
// Возвращаемое значение:
//  СправочникСсылка.инт_Подписчики - Ссылка на фиктивного подписчика
//
Функция Подписчик(ТипПодписчика = Неопределено, КоличествоПопытокОтправки =0, ПаузаМеждуПопыткамиОбработки=0) Экспорт
    Данные = ЮТест.Данные();
    Конструктор = Данные.КонструкторОбъекта(Справочники.инт_Подписчики)
    .ФикцияОбязательныхПолей()
    .Установить("КоличествоПопытокОтправки", ?(КоличествоПопытокОтправки = 0, Данные.СлучайноеЧисло(1, 4), КоличествоПопытокОтправки))
    .Фикция("СпособПередачиИдентификатораСообщения")
    .Фикция("СпособПередачиИдентификатораПотока")
    .Установить("ПаузаМеждуПопыткамиОбработки", ПаузаМеждуПопыткамиОбработки);
    Если НЕ ТипПодписчика = Неопределено Тогда
        Конструктор.Установить("ТипПодписчика", ТипПодписчика);
    Иначе
        Конструктор.Фикция("ТипПодписчика");
    КонецЕсли;
    
    Возврат Конструктор.Записать();
КонецФункции

Функция НеОшибочныйСтатусРассылкиСообщений() Экспорт
    Данные = ЮТест.Данные();
    ЭтотСтатусПодходит = Ложь;
    Пока Не ЭтотСтатусПодходит Цикл
        
        Статус = Данные.СлучайноеЗначениеПеречисления(Перечисления.инт_СтатусыРассылкиИсходящихСообщений);
        Если Не Перечисления.инт_СтатусыРассылкиИсходящихСообщений.ЭтоОшибочныйСтатус(Статус) Тогда
            ЭтотСтатусПодходит = Истина;
        КонецЕсли;
    КонецЦикла;
    
    Возврат Статус;
    
КонецФункции

Функция ОшибочныйСтатусРассылкиСообщений() Экспорт
    Данные = ЮТест.Данные();
    ЭтотСтатусПодходит = Ложь;
    Пока Не ЭтотСтатусПодходит Цикл
        
        Статус = Данные.СлучайноеЗначениеПеречисления(Перечисления.инт_СтатусыРассылкиИсходящихСообщений);
        Если Перечисления.инт_СтатусыРассылкиИсходящихСообщений.ЭтоОшибочныйСтатус(Статус) Тогда
            ЭтотСтатусПодходит = Истина;
        КонецЕсли;
    КонецЦикла;
    
    Возврат Статус;
    
КонецФункции

Функция ПотокДанныхИсходящий(Активен = Истина,КоличествоПопытокОбработки =0, ПаузаМеждуПопыткамиОбработки=0, Валидация = Ложь) Экспорт
    
        НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Исходящий;
        // Все тесты будут проводиться на одном тестовом документе, потому и тестовые данные будут обрабатываться одним обработчиком 
        ТекстОбработчика = "Результат = новый Соответствие;
        |Результат.Вставить(""uuid"", ИсходныеДанные.УникальныйИдентификатор());
        |Результат.Вставить(""date"", ИсходныеДанные.Дата);
        |Результат.Вставить(""text"", ИсходныеДанные.ДемоРеквизитСтрока);
        |МассивСтрок = Новый Массив;
        |Для каждого СтрокаТовары Из ИсходныеДанные.Тест Цикл
        |	МассивСтрок.Добавить(Новый Структура(""item, price, quantity"", СтрокаТовары.Название, СтрокаТовары.Цена, СтрокаТовары.Количество));
        |КонецЦикла;
        |Результат.Вставить(""items"", МассивСтрок);";
      
    Данные = ЮТест.Данные();
    Конструктор = Данные.КонструкторОбъекта(Справочники.инт_ПотокиДанных)
   
    .Установить("ТекстОбработчика", ТекстОбработчика)
    .Установить("НаправлениеПотока", НаправлениеПотока)
    .Установить("Активен", Активен)
    .Установить("Валидация", Валидация)
    .Установить("КоличествоПопытокОбработки",?(КоличествоПопытокОбработки = 0, Данные.СлучайноеЧисло(1, 4), КоличествоПопытокОбработки))
    .Установить("ПаузаМеждуПопыткамиОбработки",ПаузаМеждуПопыткамиОбработки);
    
    Конструктор.ТабличнаяЧасть("ПодписчикиПотока");
    
    Для сч = 1 По 3 Цикл
    	Конструктор.ДобавитьСтроку()
            .Установить("Подписчик", Подписчик());
    КонецЦикла;
    
    Возврат Конструктор.Записать();
    
КонецФункции

Функция ПотокДанныхВходящий(Активен = Истина,КоличествоПопытокОбработки =0, ПаузаМеждуПопыткамиОбработки=0) Экспорт
    
        НаправлениеПотока = Перечисления.инт_НаправлениеПотокаДанных.Входящий;
        // Все тесты будут проводиться на одном тестовом документе, потому и тестовые данные будут обрабатываться одним обработчиком 
        ТекстОбработчика = "Сообщить(""Привет из входящего потока данных"");";
      
    Данные = ЮТест.Данные();
    Конструктор = Данные.КонструкторОбъекта(Справочники.инт_ПотокиДанных)
   
    .Установить("ТекстОбработчика", ТекстОбработчика)
    .Установить("НаправлениеПотока",НаправлениеПотока)
    .Установить("Активен",Активен)
    .Установить("КоличествоПопытокОбработки",?(КоличествоПопытокОбработки = 0, Данные.СлучайноеЧисло(1, 4), КоличествоПопытокОбработки))
    .Установить("ПаузаМеждуПопыткамиОбработки",ПаузаМеждуПопыткамиОбработки);
    
    Возврат Конструктор.Записать();
    
КонецФункции

Функция демо_Документ() Экспорт
    Конструктор = ЮТест.Данные().КонструкторОбъекта(Документы.демо_Документ);
    
    Конструктор
        .Фикция("ДемоРеквизитСтрока")
        .ТабличнаяЧасть("Тест");
    
    Для Инд = 1 По 10 Цикл
    Конструктор.ДобавитьСтроку()
        .Фикция("Название")
        .Фикция("Количество")
        .Фикция("Цена");
    КонецЦикла;
    
    Возврат Конструктор.Провести();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
